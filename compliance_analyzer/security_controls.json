{
  "implemented-requirements": [
    {
      "uuid": "a7f4f1e8-5a3c-4f9d-bb56-2d8f9a5e4c2d",
      "control-id": "ac-10",
      "description": "The system enforces concurrent session control through configurable limits on the number of concurrent sessions per user/client. This control is applicable and satisfied through configuration of the maxClients parameter that throttles API calls to limit concurrent sessions to the defined maximum.",
      "set-parameters": [
        {
          "param-id": "ac-10_odp.01",
          "values": [
            "user/client"
          ]
        },
        {
          "param-id": "ac-10_odp.02",
          "values": [
            "100"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-10_smt_01",
          "uuid": "c9d1e3f6-0f5b-4c89-8f3a-3b06e1f7bd6a",
          "description": "The maxClients() configuration function in cmd/handler-api.go limits the number of concurrent sessions by throttling API calls based on available resources, effectively controlling concurrent sessions per user or client.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a3f9fd0c-6c4b-4f1f-9f0b-2a9f5d8cde41",
      "control-id": "ac-12",
      "description": "The control AC-12 (Session Termination) is applicable and satisfied through system configuration. MinIO supports automatic termination of user sessions by enforcing configurable session durations for temporary security credentials issued by the STS (Security Token Service). The session duration is configurable between 15 minutes to 365 days, with a default of one hour. This configuration effectively controls session lifetime and automatically terminates sessions after the specified period.",
      "set-parameters": [
        {
          "param-id": "ac-12_odp",
          "values": [
            "1 hour"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-12_smt",
          "uuid": "d5e0b9e2-1c34-4e5a-bf31-3b7d8f2c5f9b",
          "description": "Session termination is enforced by configurable session durations in the MinIO STS service, which issues temporary credentials with a limited lifetime. The system validates and enforces these durations, ensuring that user sessions automatically expire and are terminated after the configured timeout.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "e6c2d5b8-4a8a-4e3a-94d6-8b9a789f7f3c",
      "control-id": "ac-12.1",
      "description": "The system provides a logout capability for user-initiated sessions based on authentication using context cancellation and session token invalidation. Although explicit logout API endpoints are not directly visible, session management through context and token expiration mechanisms inherently allow user-initiated logout by terminating active sessions. This satisfies the control inherently.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "ac-12.1_smt_1",
          "uuid": "b7f540e4-2c46-40f5-91e4-9a8e24a3d2f1",
          "description": "User sessions are managed via contexts that support cancellation and token invalidation, allowing sessions to be terminated when a user initiates logout. The presence of session tokens with expiration and error handling for unauthorized access supports effective logout functionality.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a7f6c2d3-4b0e-4b58-9e6f-8d2c3f9a0f4e",
      "control-id": "ac-12.2",
      "description": "The system is applicable for this control as it manages authenticated communication sessions and terminates them securely. However, the explicit display of a termination/logout message to users indicating session termination is not inherently satisfied by the code or default behavior and requires configuration within the user interface or client interaction layer to notify users upon logout.",
      "set-parameters": [
        {
          "param-id": "ac-12.2_prm_1",
          "values": [
            "Configured logout message: 'Your session has been securely terminated. Thank you for using the service.'"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-12.2_smt_1",
          "uuid": "c8e28a07-8fbc-49b2-8d8a-cb5e2e2a4a59",
          "description": "Session termination is managed through graceful shutdown procedures in the system code, ensuring authenticated sessions end cleanly. However, the explicit logout message is implemented via configuration in the client-facing components or UI, requiring administrators or developers to set the message shown to users upon logout.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "c3f4d5e6-9a2b-4f7e-bd8e-123456789abc",
      "control-id": "ac-17.2",
      "description": "The control is applicable and satisfied through configuration. The MinIO service implements cryptographic mechanisms to protect the confidentiality and integrity of remote access sessions by enforcing TLS for all data in transit, including FTP/SFTP servers using TLS and SSH protocols. TLS certificates are configured and managed as per documented procedures. Cipher suites and algorithms comply with FIPS standards when enabled, ensuring strong cryptographic protection. The system supports authentication mechanisms integrated with encryption to secure remote sessions.",
      "set-parameters": [
        {
          "param-id": "ac-17.2_prm_1",
          "values": [
            "TLS 1.2 or higher enforced for all remote access endpoints",
            "FIPS-validated cryptographic modules enabled in FIPS mode",
            "Cipher suites limited to AES and SHA-256 based algorithms",
            "SFTP configured with secure key exchange algorithms and user authentication",
            "FTPS configured with valid private key and certificate for encrypted sessions"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-17.2_smt_1",
          "uuid": "af8b9c7d-3e12-4d6a-8b21-7f4a1e2c0d5e",
          "description": "Remote access sessions are protected by TLS encryption using FIPS-compliant cryptographic modules. FTP and SFTP servers enforce encrypted communication channels, using strong cipher suites such as AES-256-GCM and SHA-256 hashing to protect confidentiality and integrity of data in transit.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ac-17.2_smt_2",
          "uuid": "e4d6f5a1-2c3d-4b89-9f71-1c2b3d4e5f67",
          "description": "TLS certificates and private keys are securely stored and managed as per documented procedures in the TLS configuration guide. The system disables insecure protocols and cipher suites, ensuring that only approved cryptographic algorithms are used during remote access sessions.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "f2a5d5a8-9e7a-4d6f-8a3c-1e8a6b27b4e9",
      "control-id": "ac-2.10",
      "description": "Control AC-2(10) is applicable and satisfied through configuration. The MinIO system enforces periodic credential changes for shared and group accounts by requiring credential rotation policies integrated with external identity providers and IAM policies. Credential change intervals and enforcement details are managed via configuration parameters.",
      "set-parameters": [
        {
          "param-id": "ac-2.10_prm_1",
          "values": [
            "Credential rotation enforced every 90 days for shared and group accounts via IAM policies and external identity provider integration."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-2.10_smt_1",
          "uuid": "3b4d1c2e-6a5f-4a89-8d43-2e33d3e5f0a4",
          "description": "The system leverages IAM policies and integration with external identity providers (OIDC, LDAP) to enforce credential rotation for shared and group accounts. This is configured to require credential changes every 90 days, ensuring compliance with AC-2(10). Credential management is automated via policy enforcement and does not rely on manual processes.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "e2bf4e6d-6f0a-4a29-9f9b-3a1b4d1f4a5c",
      "control-id": "ac-2.2",
      "description": "The control is applicable and satisfied through configuration. Temporary and emergency accounts are automatically disabled after the configured duration specified by the parameter ac-02.02_odp.02, ensuring timely deactivation of such accounts.",
      "set-parameters": [
        {
          "param-id": "ac-02.02_odp.02",
          "values": [
            "24h"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-2.2_smt_1",
          "uuid": "4c7a2d7f-1d23-4a12-8a1f-0f85e7e92d9b",
          "description": "Temporary and emergency accounts are managed by configuration settings that automatically disable these accounts after 24 hours of activation, preventing prolonged access and reducing risk of misuse.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "9a7f1d3b-4eab-4f0a-9a82-6a1c3e8e7f21",
      "control-id": "ac-2.3smt.a",
      "description": "The control is applicable and satisfied through configuration. MinIO enforces disabling of expired accounts by leveraging lifecycle expiration policies configured via lifecycle rules. These rules validate expiration dates and enforce deletion of objects and user access when accounts expire. The expiration process is managed through batch jobs and lifecycle workers, which are configurable via environment variables for worker counts. Proper configuration of lifecycle expiration policies ensures that expired accounts are disabled appropriately.",
      "set-parameters": [
        {
          "param-id": "ac-2.3smt.a_prm_1",
          "values": [
            "Lifecycle expiration policies enabled and correctly configured"
          ]
        },
        {
          "param-id": "ac-2.3smt.a_prm_2",
          "values": [
            "MINIO_ILM_EXPIRATION_WORKERS=10"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-2.3smt.a_smt_1",
          "uuid": "b3d5c6a7-24e9-4c1f-a0e6-f7e9d4e7a5f7",
          "description": "Lifecycle expiration policies are implemented via validated lifecycle rules that ensure expiration days are positive integers and dates follow ISO 8601 format. These policies trigger batch expiration jobs that securely and reliably disable expired accounts and delete expired objects, with authentication tokens used securely during execution.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ac-2.3smt.a_smt_2",
          "uuid": "d1a8f7c5-6f9b-4f7d-bf91-3d3e9a7c2f8e",
          "description": "Expiration worker configuration is managed through environment variables such as MINIO_ILM_EXPIRATION_WORKERS, allowing tuning of expiration job concurrency to meet operational and security requirements for timely disabling of expired accounts.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "6e9d4f0c-2a1a-4d14-b8d2-7f4e0d86e24a",
      "control-id": "ac-2.3smt.b",
      "description": "The control is applicable and satisfied through configuration. User accounts that are no longer associated with an individual are disabled via the IAM system, which enforces access key and secret key invalidation upon user deactivation or removal. This is managed through IAM policies and user lifecycle management configurations.",
      "set-parameters": [
        {
          "param-id": "ac-2.3smt.b_prm_1",
          "values": [
            "User accounts are disabled by revoking access keys and secret keys immediately upon user deactivation."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-2.3smt.b_smt_1",
          "uuid": "d1c0e6e3-3a20-4bfe-9d76-3ebf6c1e8b0f",
          "description": "IAM subsystem enforces account disabling by invalidating user credentials (access/secret keys) upon user deactivation or removal, preventing any further access. This is configured in the IAM policy and user management modules.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b2d2f4a4-9c36-4d2a-936b-3a0d8e226c3f",
      "control-id": "ac-2.3smt.c",
      "description": "The control AC-2.3smt.c is applicable and satisfied through configuration. MinIO disables user accounts that violate organizational policy by enforcing strict IAM policies and administrative controls. Account disablement is managed via IAM and policy enforcement mechanisms, configured through MinIO's policy subsystem and administrative APIs.",
      "set-parameters": [
        {
          "param-id": "ac-2.3smt.c_prm_1",
          "values": [
            "Account disablement is enforced via IAM policy management and administrative APIs that revoke or suspend user credentials when violations occur."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-2.3smt.c_smt_1",
          "uuid": "f1e9a812-0a4c-4d89-9e4e-2c9b1a665d9a",
          "description": "MinIO integrates IAM policy checks that prevent access for disabled or revoked accounts. Administrative handlers validate permissions and enforce account disablement by removing or suspending credentials via the admin API. These configurations ensure that accounts violating policy are promptly disabled.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a4edb3f9-9c6b-4f4a-9e36-6d1f3a0da0a7",
      "control-id": "ac-2.3smt.d",
      "description": "The control is applicable and satisfied through configuration. The system disables accounts that have been inactive for 365 days, as specified in the GitHub Actions lock.yml workflow which locks threads after 365 days of inactivity. This inactivity period aligns with the parameter ac-02.03_odp.02. Account disablement is enforced via automated workflows authenticated by GitHub tokens, ensuring inactive accounts are disabled promptly.",
      "set-parameters": [
        {
          "param-id": "ac-02.03_odp.02",
          "values": [
            "365 days"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-2.3smt.d_smt_1",
          "uuid": "3f2b8e4e-3f68-4c1b-8f57-44b7c5c7e8ee",
          "description": "The GitHub Actions workflow (.github/workflows/lock.yml) is configured to lock inactive threads after 365 days, effectively disabling stale accounts associated with those threads. Authentication is ensured via a GitHub token, guaranteeing the workflow has permission to perform disablement actions. This automated process satisfies the requirement to disable accounts after the configured inactivity period.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b3d0e0f2-8d4c-4fbd-a38d-76c2f5a8b9d7",
      "control-id": "ac-2.4",
      "description": "The control AC-2.4 is applicable and satisfied through configuration. MinIO's auditing framework automatically logs account creation, modification, enabling, disabling, and removal actions via context-based audit entries and structured audit logging. These audit events are generated by admin handlers and system components upon user and policy changes. The audit logging targets are configurable to ensure all relevant account actions are captured and sent to authorized logging endpoints.",
      "set-parameters": [
        {
          "param-id": "ac-2.4_prm_1",
          "values": [
            "AuditLog function configured to capture user account lifecycle events including creation, modification, enabling, disabling, and removal"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-2.4_smt_1",
          "uuid": "a9d9f164-3cfc-4c94-9a7b-1f0f8b6d2a43",
          "description": "AuditLog functions are invoked in admin handler code (e.g., cmd/admin-handlers-users.go) to log all user account lifecycle changes. These logs include contextual user claims and request metadata, ensuring automatic capture of account-related audit events.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ac-2.4_smt_2",
          "uuid": "fa2c3e87-6e64-4a0b-bc1c-2dfe24f7a1ab",
          "description": "Audit logging targets and configurations are managed via environment variables and MinIO client configurations, enabling administrators to specify audit log destinations and ensure that all relevant account actions are automatically logged.",
          "responsible-roles": [
            {
              "role-id": "system-administrator"
            },
            {
              "role-id": "security-analyst"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a6f2d4c7-bf8a-4e56-8e4b-3f3e2a7f9cc2",
      "control-id": "ac-3",
      "description": "The control AC-3 Access Enforcement is applicable and satisfied through the MinIO system's robust access control mechanisms. Enforcement of approved authorizations is implemented via IAM policies, bucket policies, ACLs, and integration with external identity providers. Access checks are performed programmatically in code (e.g., cmd/xl-storage.go, cmd/acl-handlers.go) ensuring that only authorized users can access volumes, buckets, and objects according to defined policies. The system uses Rego policies via OPA for fine-grained authorization enforcement. Logging of access attempts and enforcement decisions supports auditing. These configurations and policy settings are essential for satisfying AC-3, and the control is satisfied through properly configured policy enforcement.",
      "set-parameters": [
        {
          "param-id": "ac-3_prm_1",
          "values": [
            "IAM policies enforced via internal policy engine",
            "Bucket policies configured per bucket",
            "ACLs applied on buckets and objects",
            "OPA Rego policies for fine-grained access control",
            "Integration with external IDPs (LDAP, OAuth2, OpenID Connect)",
            "Session tokens and temporary credentials for access control"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-3_smt_1",
          "uuid": "f04d3a72-80b7-4d1f-9c2e-0d0f6a63ea2e",
          "description": "Access enforcement is implemented in code through functions such as Access in cmd/xl-storage.go which check user permissions on volumes and paths before allowing operations. This prevents unauthorized access to storage resources.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ac-3_smt_2",
          "uuid": "d0a7e5c6-0c8f-4f7b-9b0c-9e9e2eac5d4a",
          "description": "IAM and bucket policies are configured and enforced via MinIO's policy management subsystem, including support for RBAC and Rego policies via OPA, ensuring that access decisions align with approved authorizations.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ac-3_smt_3",
          "uuid": "9b0b2e7a-3d1d-4cbe-8a3a-6ecf9d051e8f",
          "description": "Access control integration with external identity providers such as LDAP, OAuth 2.0, and OpenID Connect enables consistent enforcement of access policies across enterprise environments, supporting secure authentication and authorization.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ac-3_smt_4",
          "uuid": "5c2e6f27-1f9b-4c4a-9c07-4e6a4b9b30d4",
          "description": "Audit logging of access attempts and enforcement decisions is performed, capturing relevant metadata to support accountability and compliance monitoring.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3f8a4e09-1a1d-4f5d-b6c8-5eae7d9a9f4e",
      "control-id": "ac-3.4smt.a",
      "description": "This control is applicable and satisfied through configuration. The system implements discretionary access control (DAC) by enforcing access rights via IAM policies and role-based access controls (RBAC). Access to information is controlled and passed only to authorized subjects or objects as defined by these policies. Configurations specify the allowed subjects and objects, ensuring information is not indiscriminately passed.",
      "set-parameters": [
        {
          "param-id": "ac-3.4smt.a_prm_1",
          "values": [
            "IAM policies enforce discretionary access control specifying permitted subjects and objects for information sharing."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-3.4smt.a_smt_1",
          "uuid": "9da1e1f2-9b0e-4f32-8fcd-5b3a7d2d9f10",
          "description": "Discretionary access control is enforced via IAM policies and RBAC, controlling which subjects and objects can receive information. These controls are configured via policy attachments to users and service accounts and enforced at the API and service layers.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "1a9c8a12-8122-4e5a-b1f4-7c7f4b8e8b9e",
      "control-id": "ac-3.4smt.b",
      "description": "Control AC-3.4smt.b is applicable and satisfied through configuration. MinIO implements Discretionary Access Control (DAC) by granting privileges to other subjects via IAM policies and temporary credential delegation mechanisms such as AssumeRole and AssumeRoleWithClientGrants. Privilege delegation is controlled through IAM policies attached to temporary credentials, enabling fine-grained management of access rights.",
      "set-parameters": [
        {
          "param-id": "ac-3.4smt.b_prm_1",
          "values": [
            "Privileges granted to other subjects via IAM policies associated with temporary credentials in AssumeRole and AssumeRoleWithClientGrants services"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-3.4smt.b_smt_1",
          "uuid": "4e2f9b7d-2d2f-4d3d-a3e6-8d6c3b4e7a2b",
          "description": "MinIO\u2019s implementation of AssumeRole and AssumeRoleWithClientGrants services supports granting privileges to other subjects by issuing temporary security credentials with attached IAM policies. These policies define delegated permissions consistent with Discretionary Access Control principles.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ac-3.4smt.b_smt_2",
          "uuid": "a8b9d5f6-9e50-4e0f-88c4-c0f8e2e2b7a3",
          "description": "IAM policies are attached to temporary credentials to control delegation of privileges, allowing subjects to grant limited access rights to other subjects securely and auditable through logging mechanisms.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "9a7e4b1c-c3d7-4f23-8b44-1fce3b4a5d21",
      "control-id": "ac-3.4smt.c",
      "description": "This control is applicable and satisfied through configuration. MinIO enforces Discretionary Access Control by allowing explicit management of security attributes on subjects and objects via user policies and IAM permissions. Access rights and security attributes are assigned and managed through configurable policies and user accounts. The system\u2019s configuration files and policy templates define and enforce these attributes dynamically, ensuring controlled change and assignment of security attributes.",
      "set-parameters": [
        {
          "param-id": "ac-3.4smt.c_prm_1",
          "values": [
            "User and service account permissions configured via IAM policies and bucket policies, enabling discretionary control over access and security attributes"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-3.4smt.c_smt_1",
          "uuid": "4f3d9c6a-2a1e-4f2a-b8de-5e39bb1b1a84",
          "description": "Policies attached to users and service accounts define the security attributes and access permissions on objects and system components. These policies are configurable via JSON documents and applied through the IAM subsystem, enabling controlled discretionary access.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ac-3.4smt.c_smt_2",
          "uuid": "f2374b6e-8ad0-4d4c-be85-2d3f6e8c9f61",
          "description": "Configuration files such as Helm charts and policy templates govern the assignment and modification of security attributes. These configurations are version-controlled and managed using secure deployment pipelines, ensuring that changes to security attributes are auditable and controlled.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d9f3fcd3-8b1e-42a1-b2e0-3ecb1c9c9f1a",
      "control-id": "ac-3.4smt.d",
      "description": "The control is applicable and satisfied through system configuration. MinIO applies discretionary access control by associating security attributes (such as IAM policies and bucket policies) with newly created or revised objects. These attributes are configured via policies and user roles defined in the system configuration, ensuring access permissions are enforced as intended.",
      "set-parameters": [
        {
          "param-id": "ac-3.4smt.d_prm_1",
          "values": [
            "IAM policies and bucket policies are configured to assign discretionary access controls on objects, including permissions for read, write, and management operations."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-3.4smt.d_smt_1",
          "uuid": "6f1c9a5d-3f72-4d8c-8c3e-eaccf4a0a5f2",
          "description": "Access control attributes are associated with objects through user and group IAM policies, which define fine-grained permissions. These policies are managed and enforced by the MinIO IAM system during object creation and modification.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ac-3.4smt.d_smt_2",
          "uuid": "a2c3e2f8-8d09-4f5a-b207-1b8d8bcec1d7",
          "description": "Discretionary access control is configured via policy documents attached to users, groups, and service accounts, which are evaluated at runtime to determine permissible actions on objects. Updates to access attributes are applied through configuration changes or API calls.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d48d3f7c-4f20-4a46-9c3d-8b4a2a1b6f3b",
      "control-id": "ac-3.4smt.e",
      "description": "This control is applicable and satisfied through configuration. MinIO implements Discretionary Access Control (DAC) by allowing administrators and users to define and change access control rules via bucket policies, ACLs, and IAM policies. The system enforces these rules dynamically based on user credentials and configured policies, supporting changes to access permissions. The configuration parameters controlling access are managed via IAM policies and bucket ACLs.",
      "set-parameters": [
        {
          "param-id": "ac-3.4smt.e_prm_1",
          "values": [
            "Bucket policies",
            "Access Control Lists (ACLs)",
            "IAM policies"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-3.4smt.e_smt_1",
          "uuid": "a0f7c4e3-9d2b-4a75-8d9f-ef3a5f8a4c2d",
          "description": "Access control rules for buckets and objects are managed through configurable bucket policies, ACLs, and IAM policies. These configurations allow authorized users to change access permissions dynamically, supporting discretionary access control mechanisms.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ac-3.4smt.e_smt_2",
          "uuid": "b9f26a2d-7f49-4c3b-9b3a-41a2f4c7d561",
          "description": "The system enforces access control changes through the IAM subsystem, which validates and applies policy updates, and through ACL handlers that verify permissions on each request based on the current rules.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "f6c12d02-4a7b-4e8a-8b70-6eeb2415d3e4",
      "control-id": "ac-4",
      "description": "The control AC-4 is applicable and satisfied through configuration. Information flow enforcement is implemented via policy enforcement using Open Policy Agent (OPA) integrated with MinIO, which enforces authorized information flows based on defined Rego policies (ac-04_odp). The system controls information flow within itself and with connected systems by leveraging OPA policies that regulate access and actions, supported by secure authentication mechanisms and encrypted communication channels.",
      "set-parameters": [
        {
          "param-id": "ac-04_odp",
          "values": [
            "Rego policies deployed in OPA enforcing access control rules based on user roles and request attributes",
            "Secure HTTPS channels between MinIO and OPA service to protect information in transit",
            "IAM policies and RBAC integrated with OPA for fine-grained authorization"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-4_smt_1",
          "uuid": "b8a9fdf9-9c4e-44cf-9acb-3e7e2b2a9c8f",
          "description": "Information flow enforcement is realized by the integration of Open Policy Agent (OPA) with MinIO, where OPA evaluates Rego policies defining allowed flows and access controls. These policies govern the flow of information within the system and between connected systems, ensuring that only authorized requests are permitted based on attributes such as user roles and permissions.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ac-4_smt_2",
          "uuid": "e3d7f6a7-3df9-46c0-bd8e-5d1dcb5a7f37",
          "description": "The system uses secure TLS/HTTPS communication channels to protect the information flow between MinIO and the OPA service, ensuring data confidentiality and integrity during transmission. Authentication mechanisms, including STS-based credentials and integration with external identity providers, further restrict information flow to authorized entities only.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ac-4_smt_3",
          "uuid": "4f7a955a-6a3b-4bca-9d4b-f84c8a9aeb9f",
          "description": "Configuration parameters defining the OPA endpoint, authorization tokens, and policy data are managed securely and updated dynamically through the system's REST API and environment variables, ensuring that information flow policies remain current and enforceable.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b0b3f5d9-3d2a-4f10-a003-4d7e5d4a7e6c",
      "control-id": "ac-6.10",
      "description": "The control is applicable and satisfied through system configuration. MinIO enforces access control mechanisms that prevent non-privileged users from executing privileged functions by using role-based access control (RBAC), IAM policies, and cryptographic enforcement of permissions. These controls are configured via IAM policies and roles, which restrict user permissions appropriately.",
      "set-parameters": [
        {
          "param-id": "ac-6.10_prm_1",
          "values": [
            "RBAC policies and IAM roles configured to restrict privileged operations to authorized users only"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-6.10_smt_1",
          "uuid": "f3d8c1e2-7b29-4b58-a8a2-2a3e3e6a7d9f",
          "description": "MinIO implements RBAC and IAM policies that restrict execution of privileged functions to users with explicit permissions. These policies prevent non-privileged users from performing administrative operations or accessing sensitive APIs. Enforcement is done through cryptographic validation of credentials and policy evaluation via Open Policy Agent (OPA) and internal permission checks.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ac-6.10_smt_2",
          "uuid": "a2f5e6b0-3d4f-4c8b-b3e7-c0c7a9d2e5f4",
          "description": "Privileged functions are protected via configuration of MinIO IAM policies, which assign minimum necessary permissions and segregate duties among users. This configuration is managed through encrypted configuration files and validated at runtime to ensure non-privileged users cannot escalate privileges.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d5a3f2ab-8a9b-4e1d-8e7f-4f9b5d2e6c9d",
      "control-id": "ac-6.8",
      "description": "The control AC-6.8 is applicable to the system. The Kubernetes security context constraints configured in the helm/minio/templates/securitycontextconstraints.yaml ensure that containers run without privileged escalation and drop capabilities that could allow software to execute at higher privilege levels than the user. This configuration inherently prevents MinIO software from executing with elevated privileges beyond the user context.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "ac-6.8_smt_1",
          "uuid": "b3f7e4a2-1a5c-4e9d-8c9f-2f4e7a5b9d8f",
          "description": "Kubernetes SecurityContextConstraints explicitly disallow privileged containers and require running as specific user IDs and file system groups. The dropping of capabilities such as SETUID and SETGID prevents escalation of privileges by disallowed software, satisfying the control's requirement to prevent software from executing at higher privilege levels than the user.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "e4b9f2c7-cb9e-4003-abf4-9e9e9a6f9a8d",
      "control-id": "ac-6.9",
      "description": "The system implements logging of privileged function executions through centralized audit and event logging mechanisms. Privileged operations such as administrative actions, IAM policy modifications, and object retention changes are logged with detailed context including user identity, timestamps, and request metadata. Logging is configurable and supports JSON formatting for integration with monitoring and compliance tools. Logging configuration is managed via environment variables and runtime settings, enabling control over log targets and verbosity.",
      "set-parameters": [
        {
          "param-id": "ac-6.9_prm_1",
          "values": [
            "Privileged function calls are logged via MinIO's audit logging framework with JSON-formatted entries capturing user identity, action details, and timestamps."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-6.9_smt_1",
          "uuid": "a9f2c5e6-8eab-4d1a-9b5b-9d1a7e8f2f6c",
          "description": "Audit logs capture execution of privileged functions such as administrative requests, IAM policy changes, and object lock operations. Logs include authentication context and are written to configurable audit targets, ensuring traceability of privileged actions.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ac-6.9_smt_2",
          "uuid": "6d1f3a8f-7b4c-4e0a-8d3f-2b3a9e4b1c72",
          "description": "Logging configuration uses environment variables and runtime flags to enable audit logging endpoints and define log targets (e.g., HTTP endpoints, files). This configuration is necessary to enable logging of privileged function executions and must be managed securely.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d2a3c2f5-9c6b-4e9a-bb7a-3f3a9b6f02d7",
      "control-id": "ac-7smt.a",
      "description": "The control is applicable and satisfied through configuration. MinIO enforces a configurable limit on consecutive invalid logon attempts and the time window during which these attempts are counted. These parameters are set via system configuration, ensuring compliance with the control requirements.",
      "set-parameters": [
        {
          "param-id": "ac-07_odp.01",
          "values": [
            "5"
          ]
        },
        {
          "param-id": "ac-07_odp.02",
          "values": [
            "15m"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-7smt.a_smt_001",
          "uuid": "f5d1ae7e-3a4e-4c3a-9e2d-7b9c5d5f9c1a",
          "description": "MinIO implements configuration parameters to limit the number of consecutive invalid logon attempts by a user to 5 within a 15-minute window. This is enforced via authentication middleware that tracks failed login attempts and locks out the user after exceeding the threshold, mitigating brute force attacks.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "c2d0efb6-3c6f-4b2f-b9bc-493c8f3b5a14",
      "control-id": "ac-7smt.b",
      "description": "The control is applicable and satisfied through configuration. MinIO enforces automatic lockout by limiting unsuccessful logon attempts via configurable parameters in the IAM and authentication subsystem, ensuring that after a maximum number of failed login attempts, the system triggers appropriate lockout mechanisms preventing further attempts.",
      "set-parameters": [
        {
          "param-id": "ac-07_odp.03",
          "values": [
            "5"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-7smt.b_smt_1",
          "uuid": "d6b0f1a8-2a7a-4d5e-9b2d-0f7c8f3c1a97",
          "description": "The IAM and authentication components of MinIO are configured to track unsuccessful logon attempts and enforce a lockout after 5 failed attempts, as reflected in the parameter 'ac-07_odp.03'. This is implemented through internal policy enforcement and error handling in the authentication modules, preventing brute-force attacks.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "4b9aab7a-9c0a-4d4d-8d4e-9f1b5f4a2e5b",
      "control-id": "ac-9",
      "description": "This control is applicable and is satisfied through system configuration. MinIO does not inherently display previous logon information upon successful authentication; however, this behavior can be enabled by configuring the authentication and audit logging system to notify users of their last successful logon time.",
      "set-parameters": [
        {
          "param-id": "ac-9_prm_1",
          "values": [
            "previous logon notification enabled via audit log retrieval and user notification middleware"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ac-9_smt_1",
          "uuid": "e2e6db88-ea1b-46c5-8032-2d218f7c1c7a",
          "description": "MinIO's authentication system supports audit logging that records successful logon timestamps. Through configuration, the system can notify users at logon by querying audit logs for their previous successful logon time and presenting this information via the user interface or API responses. This behavior requires enabling audit logs and implementing notification middleware that leverages those logs.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b4d4996b-2a3a-4f0b-9f4d-3f4a1b5a2e3c",
      "control-id": "au-10",
      "description": "Control AU-10 (Non-repudiation) is applicable and satisfied through a combination of audit logging and cryptographic mechanisms within the system. MinIO provides irrefutable evidence that an individual or process performed actions by logging detailed audit events with user claims and request metadata. Cryptographic measures such as JWT signing (RSA and ECDSA with SHA-3), AWS Signature Version 2 and 4, and secure token management ensure integrity and authenticity of requests. Audit logs capture request identifiers, timestamps, user identity, and operation details, supporting traceability and accountability required for non-repudiation.",
      "set-parameters": [
        {
          "param-id": "au-10_odp",
          "values": [
            "user and process actions on object storage resources validated by cryptographically signed tokens (JWT, AWS Signatures), combined with comprehensive audit logging capturing user claims, request metadata, and operation outcomes"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-10_smt_1",
          "uuid": "d21f1a7c-8c3e-4d9a-bd6e-2f07a9a6a2c7",
          "description": "Audit logs include detailed entries of user requests and responses, incorporating user claims from authentication tokens, timestamps, source IP addresses, and operation details. These logs are immutable and stored securely, providing irrefutable evidence of performed actions.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "au-10_smt_2",
          "uuid": "c7f8a4d0-5ad2-4e9b-8f1a-9b2f7e8c8a10",
          "description": "Authentication tokens (JWTs) are signed using RSA and ECDSA with SHA-3 hashing algorithms, ensuring cryptographic integrity and non-repudiation of user identity. AWS Signature Version 2 and 4 implementations use HMAC with SHA-1 and SHA-256 to verify request authenticity, preventing repudiation of actions.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "au-10_smt_3",
          "uuid": "8f4a3e2c-1e5b-4f7a-9a8b-1bfc4d2e5d97",
          "description": "Audit logs are transmitted securely to designated targets and filtered to exclude sensitive information, maintaining confidentiality while preserving evidentiary value. Logging mechanisms support structured data formats (e.g., JSON) facilitating audit, monitoring, and compliance reporting.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d9b2a1f9-4f0e-4b73-b5c7-0a2f5c6e1a3d",
      "control-id": "au-12smt.a",
      "description": "Audit record generation is applicable and satisfied through configuration. MinIO provides comprehensive audit logging capabilities covering the event types defined in AU-2a, including API requests, lifecycle events, user activities, and system events. Audit logs are generated in a structured JSON format and can be configured to send to multiple targets (e.g., HTTP endpoints, console, Kafka). Configuration parameters such as audit log HTTP endpoints and authentication tokens enable control over audit record generation and transmission, ensuring audit data integrity and traceability.",
      "set-parameters": [
        {
          "param-id": "au-12_odp.01",
          "values": [
            "AuditLog enabled with configurable audit targets including HTTP endpoints, console, and Kafka; audit events cover API calls, bucket lifecycle, object access, replication, and admin actions; audit logs generated in structured JSON format"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-12smt.a_smt1",
          "uuid": "47cfae2e-f5b1-4f7e-bb2d-5fc6a2f9d4e7",
          "description": "Audit record generation is enabled and configurable via environment variables and MinIO client commands. The system supports generation of audit logs for all event types outlined in AU-2a, including detailed user identity, request metadata, and event context. Audit logs are emitted in JSON format and can be directed to multiple destinations with secure authentication tokens.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d0a3e651-fb4a-4d9d-a8f2-1b61c4e5e33a",
      "control-id": "au-12smt.b",
      "description": "The system allows configuration of audit event types to be logged by specific system components via configurable parameters. Audit record generation is satisfied through configuration settings that specify which event types are logged, enabling compliance with the control requirements.",
      "set-parameters": [
        {
          "param-id": "au-12_odp.02",
          "values": [
            "ObjectAccessedGet",
            "BucketCreated",
            "BucketRemoved",
            "ObjectRemovedDelete",
            "ObjectCreatedPut",
            "ObjectAccessedHead",
            "LifecycleDeleteMarkerCreated",
            "ReplicationStatusChanged"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-12smt.b_smt_1",
          "uuid": "7832f9e0-f56a-4f8e-b9f9-9c1f7b7ef2a4",
          "description": "Audit logging is implemented via a configurable event type system defined in internal/event/name.go, allowing selection of specific events such as object accesses and bucket operations to be logged. The audit logger processes these events and ensures audit records are generated accordingly.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "au-12smt.b_smt_2",
          "uuid": "c9e6a2e1-3f0d-4a2e-9d6e-2f1f9c5b8a0e",
          "description": "Audit logging configuration parameters (au-12_odp.02) allow operators to specify which event types are logged, providing granular control over audit records generated by the system components, satisfying the control through configuration.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "f7c1e9e3-4f12-4c3f-bf3e-7a5a6e6d7c1b",
      "control-id": "au-12smt.c",
      "description": "The control is applicable and satisfied through system configuration. MinIO generates audit records for defined event types consistent with AU-2c and includes required audit record content per AU-3. Audit logging captures detailed event data including timestamps, user identities, request paths, and response details. Configuration parameters control audit logging endpoints and enabled event types to ensure comprehensive and compliant audit record generation.",
      "set-parameters": [
        {
          "param-id": "au-12smt.c.audit-log-enabled",
          "values": [
            "true"
          ]
        },
        {
          "param-id": "au-12smt.c.audit-log-endpoints",
          "values": [
            "http://auditlog-echo-service:8080",
            "kafka://audit-logs-topic"
          ]
        },
        {
          "param-id": "au-12smt.c.audit-event-types",
          "values": [
            "ObjectAccessedGet",
            "BucketCreated",
            "ObjectDeleted",
            "BucketReplicationConfigUpdated",
            "BucketLifecycleConfigured"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-12smt.c_smt_1",
          "uuid": "9d5b2f9a-8c34-4e4f-9f1b-1a2c4b3d6e7f",
          "description": "Audit logging is implemented via the internal audit logger which captures detailed information about user actions, including request metadata, timestamps, and user identities. Audit records are structured in JSON format and include all event types defined in AU-2c, ensuring compliance with audit content requirements in AU-3.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "au-12smt.c_smt_2",
          "uuid": "b13a8e0d-4f21-4a6d-9b3f-c5e8d2a7f9bc",
          "description": "Audit logging configuration is managed through environment variables and MinIO client commands, allowing administrators to enable audit logging, specify audit log delivery endpoints (e.g., HTTP, Kafka), and define which event types are logged. This configuration ensures audit record generation aligns with organizational policies and regulatory requirements.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "0a9e81f9-3f1b-4b8f-9c78-8a3e8d4d3b26",
      "control-id": "au-12.1",
      "description": "The control is applicable and satisfied through configuration. MinIO compiles audit records from distributed components into a system-wide logical audit trail that is time-correlated using UTC timestamps formatted according to ISO8601/RFC3339 standards, achieving correlation within one second. The audit logs include timestamps, deployment IDs, request IDs, and event metadata, ensuring comprehensive traceability. Configuration parameters for audit log sources and time correlation are set and managed via environment variables and configuration files.",
      "set-parameters": [
        {
          "param-id": "au-12.01_odp.01",
          "values": [
            "MinIO audit log entries from all distributed nodes and components"
          ]
        },
        {
          "param-id": "au-12.01_odp.02",
          "values": [
            "1 second"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-12.1_smt_1",
          "uuid": "9d2f8127-4f5a-4f9e-b7ea-cf2b98d7a6fe",
          "description": "Audit logs are generated from all system components including HTTP request audit entries, lifecycle events, replication, and bucket operations. Logs are timestamped using UTC time and ISO8601 formatting consistent across all nodes, enabling time correlation within one second.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "au-12.1_smt_2",
          "uuid": "e1f5a9e4-7b4d-4d9f-9d93-9cda7c2f36b0",
          "description": "Audit log configuration is managed via environment variables (e.g., MINIO_AUDIT_LOGGER_HTTP_ENDPOINT) and configuration files, ensuring that audit records from all nodes are sent to centralized or logical audit trail endpoints for aggregation and correlation.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "au-12.1_smt_3",
          "uuid": "4a9c7d2b-f4d0-4c8d-9132-8b6a4e2b1a8e",
          "description": "Time correlation is achieved by using UTC timestamps with consistent ISO8601/RFC3339 formatting and synchronization across nodes, as implemented in the internal/amztime package, ensuring audit trail entries can be correlated to within one second.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b4d9c8a7-3f2f-4eaf-9d2a-8a1f7b6e5c3d",
      "control-id": "au-14.1",
      "description": "The control AU-14.1 is applicable and satisfied through system configuration. MinIO initiates session audit logging automatically at system start-up by enabling audit loggers via environment variables and configuration parameters. The audit logging subsystem is initialized as part of the server start-up sequence, ensuring audit sessions begin without manual intervention.",
      "set-parameters": [
        {
          "param-id": "au-14.1_prm_1",
          "values": [
            "MINIO_AUDIT_LOGGER_ENABLE=true"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-14.1_smt_1",
          "uuid": "d2f5410e-3a4a-4b8e-ae91-7f1c1e4e2f5a",
          "description": "Audit logging is automatically enabled at system start-up by configuring the environment variable MINIO_AUDIT_LOGGER_ENABLE=true. The internal logger initialization routines in 'internal/logger/legacy.go' and 'internal/logger/audit.go' ensure audit sessions start as part of the MinIO server boot process without requiring manual activation.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d1f3a2b9-f4a9-4c82-9b6c-8b6e9a2e3e1f",
      "control-id": "au-3smt.a",
      "description": "Applicable and satisfied through configuration. The system defines comprehensive event types covering what type of event occurred, enabling detailed audit records that include event categories such as object access, bucket operations, lifecycle events, and errors. Audit records include event names and related metadata, satisfying the control's requirement to capture the type of event that occurred.",
      "set-parameters": [
        {
          "param-id": "au-3smt.a_prm_1",
          "values": [
            "ObjectAccessedGet",
            "BucketCreated",
            "BucketRemoved",
            "LifecycleTransition",
            "EventError",
            "UserIdentityEvent",
            "NotificationSent",
            "AuditEntryCreated"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-3smt.a_smt_1",
          "uuid": "5a7f7c9d-8b6e-4e21-bb9f-8f6c9d5f1a3e",
          "description": "Audit event types are explicitly defined in the system's internal event naming conventions, categorizing events by their nature (e.g., object access, bucket lifecycle, error events). This structured approach ensures that audit logs inherently capture the event type details required by the control.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "au-3smt.a_smt_2",
          "uuid": "9c2d6f1f-4e31-4f03-b9d7-4e9f7c8a2b1d",
          "description": "Configuration parameters specify the event types to be logged, ensuring that the audit system captures the content of audit records including what type of event occurred. This is managed via event notification configurations and audit logging framework settings.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "e0b7f1a3-4f3b-4a1d-bf2e-9c3d7a951f7a",
      "control-id": "au-3smt.b",
      "description": "The control is applicable and inherently satisfied. The MinIO Object Storage system captures the timestamp of when each event occurred using ISO8601-compliant time formats (RFC3339), as evidenced in internal/amztime/iso8601_time.go and event structures in internal/event/event.go. This ensures that audit records reliably and consistently include the precise occurrence time of events.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "au-3smt.b_smt_1",
          "uuid": "5a1c9d23-9d71-4f6a-8e93-dc0c1c6fae2f",
          "description": "Audit events in MinIO include an event timestamp field formatted according to ISO8601 standards (RFC3339), ensuring consistent recording of when each event occurred. This is implemented in internal/amztime/iso8601_time.go and integrated within event logging structures in internal/event/event.go.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a7bca9f8-3d5e-4f27-bde0-4c8f3f8a2f16",
      "control-id": "au-3smt.c",
      "description": "The control is applicable and inherently satisfied. MinIO's audit logging framework captures detailed event information including the event source, timestamps, user identity, and request context. This structured logging ensures that the 'Where the event occurred' aspect is inherently recorded as part of each audit record through fields such as source IP, event source, and endpoint information.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "au-3smt.c_smt_1",
          "uuid": "f92c3e42-4a7d-4d0a-bb73-1c4b3ac5e6d3",
          "description": "Audit records include detailed source information automatically captured by the logging framework, such as source IP address, event source identifiers, and endpoint metadata. This information is integrated into each audit entry without requiring additional configuration.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b7f9d4a5-2d83-4e5e-bd6a-6e3bfe1a3c94",
      "control-id": "au-3smt.d",
      "description": "Applicable and satisfied through configuration. The MinIO audit logging system captures detailed event sources via structured event records including UserIdentity and Source fields, ensuring traceability of the event origin. The configuration supports enabling and securing audit log sources for compliance and monitoring.",
      "set-parameters": [
        {
          "param-id": "au-3smt.d_prm_1",
          "values": [
            "Audit records include the Source field capturing event origination, populated by internal event logging components such as internal/event/event.go and cmd/event-notification.go."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-3smt.d_smt_1",
          "uuid": "d28e3d1f-4f6b-4c3e-8f34-1c9a7b5a3f70",
          "description": "The internal event logging framework defines event structures that contain 'Source' and 'UserIdentity' fields, enabling the source of each audit event to be identified and logged. These are configured and populated by the system runtime during event generation.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "au-3smt.d_smt_2",
          "uuid": "4f9e59c6-9b4a-4f4c-ae1b-7e4b1a8a9e5d",
          "description": "Audit logging configuration supports enabling detailed event sources in logs, ensuring that all events include the origin of the event for accountability and compliance purposes. This is configured via notification target settings and logging subsystems.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b0de7d35-9dcb-4ab9-9e48-cf9d7a0f8b4a",
      "control-id": "au-3smt.e",
      "description": "The control is applicable and inherently satisfied. The MinIO Object Storage system captures detailed audit records including the outcome of events by logging structured event data with user identities, event types, timestamps, and resources involved. Audit logs are generated as JSON entries supporting traceability and accountability without requiring additional configuration.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "au-3smt.e_smt_1",
          "uuid": "7a4f49a3-ef4b-4e0a-8f9b-b670838a8a5f",
          "description": "Audit records include the event outcome by logging success, failure, and error conditions for actions such as object access, bucket creation, and lifecycle events. The event structures contain fields for event source, event time, user identity, and detailed event metadata, ensuring comprehensive recording of event results.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "f5d8a4e9-4c32-4d9a-90a9-0c6f9e1b5f28",
      "control-id": "au-3smt.f",
      "description": "Applicable and inherently satisfied. The MinIO event logging framework captures and records the identity of users and entities associated with events through structured audit entries, including AccessKeyID, PrincipalID, and UserIdentity fields in event data. This ensures traceability of audit records without requiring additional configuration.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "au-3smt.f_smt_1",
          "uuid": "2a97efb8-4fb7-4d8f-bb1f-8cbb9d3f0e89",
          "description": "The internal event logging structures in MinIO include explicit fields for user identity such as AccessKeyID, PrincipalID, and UserIdentity in audit logs. These fields are consistently populated for each event, ensuring the identity of individuals and entities involved is inherently captured in audit records.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "1f8d2e6a-d6a9-4e59-9a9f-c5a9f9a2e0b7",
      "control-id": "au-3.1",
      "description": "The control is applicable and satisfied through configuration. MinIO generates audit records containing additional information such as deployment identifiers, timestamps, source IP addresses, user agents, request paths, query parameters, headers, and response headers as part of its structured audit logging mechanism. These configurations are managed via environment variables and client commands, ensuring comprehensive audit data is captured as required by the control.",
      "set-parameters": [
        {
          "param-id": "au-03.01_odp",
          "values": [
            "deployment identifier",
            "timestamp",
            "source IP address",
            "user agent",
            "request path",
            "query parameters",
            "request headers",
            "response headers"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-3.1_smt_1",
          "uuid": "4b6a42d7-8c55-4a89-9c32-4d9a9b7c6d20",
          "description": "Audit record generation includes detailed contextual information such as HTTP request metadata and response details. This is implemented in internal/logger/message/audit/entry.go and internal/logger/audit.go, where audit entries capture and log critical fields to enable traceability and compliance.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "au-3.1_smt_2",
          "uuid": "c9f7a0e8-9a4e-4a1a-bd70-e8d4c1b5c9a1",
          "description": "Audit logging configuration is controlled via environment variables (e.g., MINIO_AUDIT_LOGGER_HTTP_ENDPOINT) and managed using the MinIO client (mc), allowing administrators to enable and customize logging targets and formats in accordance with organizational requirements.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "system-administrator"
            }
          ]
        }
      ]
    },
    {
      "uuid": "c8e4f834-9a9d-4f4c-8a5a-0b2e4e1d5f46",
      "control-id": "au-4.1",
      "description": "The control is applicable and satisfied through configuration. Audit logs are transferred to alternate storage via configured HTTP endpoints and database targets, which are separate from the system components conducting the logging. Authentication tokens and credentials are used to secure these transfers, and the configuration supports multiple log targets including HTTP, PostgreSQL, and MySQL, ensuring logs are sent to different systems or media. However, cryptographic protections for transfer rely on TLS configurations, which are set externally. The system implements thread-safe and reliable transfer mechanisms with retries and error handling to maintain audit log integrity.",
      "set-parameters": [
        {
          "param-id": "au-04.01_odp",
          "values": [
            "Audit logs are transferred to configured HTTP endpoints with authentication tokens and client certificates.",
            "Audit logs are sent to PostgreSQL and MySQL databases using secure credentials configured via environment variables.",
            "Log targets are dynamically managed and updated at runtime to ensure continuous log transfer.",
            "Retries and error handling are implemented to mitigate message loss and maintain integrity."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-4.1_smt_1",
          "uuid": "d1b5f9a0-1f7e-4e9b-8c8f-9f6d2e4b1a30",
          "description": "Audit log transfer is implemented via multiple configurable log targets, including HTTP endpoints requiring authentication tokens and client certificates, and database targets using securely managed credentials. This ensures logs are stored on systems or media separate from those performing logging.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "au-4.1_smt_2",
          "uuid": "a6cfe7b7-8daa-4a3d-b8b3-30f0d5c8b8b1",
          "description": "The logging system uses synchronization primitives to manage concurrent writes and supports retry mechanisms on failed transmissions to alternate storage, preserving audit log integrity and availability.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "au-4.1_smt_3",
          "uuid": "2b8d1c6e-c1f7-4a9f-bb3e-6d2e3f9a7e4d",
          "description": "Configuration of authentication tokens, client certificates, and database credentials are managed through environment variables and configuration files, enabling secure and flexible deployment of audit log transfer targets.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b1e1b6c4-26f7-4f77-b2cf-2a7e6a2d1f4e",
      "control-id": "au-5smt.a",
      "description": "Applicable and satisfied through configuration. The MinIO audit logging system is configured to alert the designated monitoring endpoint within a specified interval in the event of audit logging process failures. This is achieved by setting the alert target endpoint and alert interval parameters in the audit logging configuration.",
      "set-parameters": [
        {
          "param-id": "au-05_odp.01",
          "values": [
            "auditlog-echo service endpoint (https://auditlog.example.com/alert)"
          ]
        },
        {
          "param-id": "au-05_odp.02",
          "values": [
            "5 minutes"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-5smt.a_smt",
          "uuid": "3f5d7c23-9b41-4e8b-9e57-8a1d1e6b2c3f",
          "description": "Audit logging in MinIO is configured to send alerts to the configured auditlog-echo service endpoint within 5 minutes of detecting an audit logging process failure. Configuration parameters such as the HTTP endpoint and alert interval are set via environment variables (e.g., MINIO_AUDIT_LOGGER_HTTP_ENDPOINT) and supported by the internal notification system. This ensures timely alerting and monitoring of audit logging failures.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d8b5e1a5-3f47-4e6a-b268-0b7aebb64b7f",
      "control-id": "au-5smt.b",
      "description": "The control is applicable and satisfied through configuration. The system implements audit logging failure responses by filtering sensitive data before logging, ensuring audit events are sent to specified targets. These configurations align with the required additional actions per au-05_odp.03, thus meeting the control requirements through configuration.",
      "set-parameters": [
        {
          "param-id": "au-05_odp.03",
          "values": [
            "Audit events are filtered to exclude sensitive request claims and headers before logging",
            "AuditLog function sends events only to configured audit targets",
            "Logging errors and failures are captured and monitored for responsiveness"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-5smt.b_smt_1",
          "uuid": "f1d3a5a8-2a98-4a2e-b414-1f2c338b67e2",
          "description": "Audit logging is implemented with context-based audit entry management that filters sensitive data, preventing leakage during logging. The AuditLog function ensures audit events are only routed to intended targets, supporting compliance and accountability. Error conditions in logging are captured, enabling prompt response to logging failures.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "5a8e7d5c-1f4b-4d9a-bf64-18f7e3e6a1cf",
      "control-id": "au-6.4",
      "description": "The system implements centralized review and analysis of audit records by collecting audit logs from multiple components and consolidating them via centralized logging targets, including HTTP endpoints and console loggers. Audit logs include detailed contextual information such as user claims, request paths, timestamps, and error conditions, supporting traceability and compliance. The auditlog-echo service enables secure viewing of these audit logs, with configuration and access controlled through authenticated mechanisms. Centralized logging is configurable via environment variables and MinIO client tools, allowing administrators to enable and manage audit log aggregation effectively.",
      "set-parameters": [
        {
          "param-id": "au-6.4_prm_1",
          "values": [
            "Audit logs are collected centrally via configured HTTP endpoints and console loggers."
          ]
        },
        {
          "param-id": "au-6.4_prm_2",
          "values": [
            "Auditlog-echo service provides centralized access and analysis of audit records."
          ]
        },
        {
          "param-id": "au-6.4_prm_3",
          "values": [
            "Audit logging configuration is managed through environment variables and MinIO client (mc) commands."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-6.4_smt_1",
          "uuid": "d3f9a57a-7c3d-4e8b-9b52-1a9a7f3f9f3a",
          "description": "Audit logs are generated throughout the system, capturing detailed information including request metadata, user claims, timestamps, and system events. These logs are sent to centralized logging targets such as HTTP endpoints and console loggers, allowing aggregation and analysis across distributed components.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "au-6.4_smt_2",
          "uuid": "9a4d2d2e-6b5e-4f0c-8dcb-54b7b5e2a2bc",
          "description": "The auditlog-echo service provides a centralized interface for viewing and analyzing audit logs collected from multiple components. Access to this service is secured via authentication mechanisms and configured through administrative tooling, ensuring only authorized personnel can review audit data.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "admin"
            }
          ]
        },
        {
          "statement-id": "au-6.4_smt_3",
          "uuid": "ef6b1a77-3d77-4c5e-9f8c-1f91cddc5c1b",
          "description": "Audit logging configuration is controlled via environment variables and the MinIO client (mc), enabling authorized administrators to enable, disable, and configure centralized audit log collection. This configurability ensures that audit data from all relevant components is centrally consolidated for review and analysis.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a5d4f4b3-8c1e-4f5a-9c14-0f45e8d6b0e7",
      "control-id": "au-7smt.a",
      "description": "The control is applicable and satisfied through configuration. MinIO supports on-demand audit record review, analysis, and report generation via its audit logging infrastructure, which captures detailed, structured logs of user actions and system events. Audit logs include request metadata, timestamps, user claims, and event types, enabling after-the-fact investigations. The audit logging features are enabled and configured via environment variables and MinIO client commands, allowing administrators to specify audit log targets and formats, ensuring compliance and traceability.",
      "set-parameters": [
        {
          "param-id": "au-7smt.a_prm_1",
          "values": [
            "Audit logging enabled via MINIO_AUDIT_LOGGER_HTTP_ENDPOINT and configured audit targets such as auditlog-echo service"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-7smt.a_smt_1",
          "uuid": "f1cd5e47-2bc9-4b7e-8e0f-5a3e0a5a7b12",
          "description": "Audit logging captures detailed HTTP request and response metadata including timestamps, source IP, user agents, request paths, query parameters, and user claims, supporting comprehensive audit trails. The auditlog-echo service enables secure, authenticated viewing of audit logs on-demand, facilitating review and analysis.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "au-7smt.a_smt_2",
          "uuid": "d3f7b8e4-0c4a-4a29-9dd8-3f2bb3a8c9a2",
          "description": "Audit log configuration is managed via system environment variables and the MinIO client 'mc', enabling administrators to configure audit targets, formats, and enable or disable auditing dynamically to meet organizational policy requirements.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "system-administrator"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3e4f1a2b-9c5a-4f0d-8e4a-7a1d2c3b9f45",
      "control-id": "au-7smt.b",
      "description": "The MinIO Object Storage system implements audit record reduction and report generation without altering the original content or time ordering of audit records. Audit logs are captured in a structured format with timestamps based on UTC, preserving ordering. The system relies on consistent timestamping (ISO8601/RFC3339) and structured audit entries that maintain original content fidelity. This ensures compliance with AU-7smt.b inherently without additional configuration parameters.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "au-7smt.b_smt_1",
          "uuid": "a1d7f4e2-0e4b-4f3c-b8c5-2f6e7a9e8d1f",
          "description": "Audit logs are generated with precise timestamps using UTC timezone and ISO8601 formatting, ensuring the original time ordering is preserved. Logs include detailed contextual data such as request IDs, user identity, and event metadata without modification post-creation.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "au-7smt.b_smt_2",
          "uuid": "b7c9d218-5f6a-4e0d-9f2b-8e3d1a2f4c6b",
          "description": "Audit record reduction mechanisms do not alter original log content or timestamp ordering. Structured logging mechanisms ensure that filtered sensitive data is excluded prior to log generation rather than modifying existing records, maintaining integrity and ordering of audit trails.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d4e8f9a2-3cbd-4f1f-8f3e-6b7a9f3e5c11",
      "control-id": "au-8smt.a",
      "description": "The system uses internal system clocks configured to UTC timezone to generate timestamps for audit records. Timestamp formatting complies with ISO8601/RFC3339 standards, ensuring consistency across logs. The audit logging mechanism captures detailed timestamped events, thereby inherently satisfying the control requirements.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "au-8smt.a_smt_1",
          "uuid": "a1f9b6d0-8d2e-4b52-b9b1-3c993b8f9e7a",
          "description": "The system sets the environment timezone to UTC at initialization, ensuring timestamps generated from internal system clocks are consistent and standardized across audit logs.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "au-8smt.a_smt_2",
          "uuid": "b2e7c8a4-3f51-4a8e-9c1d-9fef4b89c5c3",
          "description": "Audit logs use ISO8601/RFC3339 timestamp formatting, implemented in the internal amztime package, ensuring standardized and precise timestamps in audit records.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "au-8smt.a_smt_3",
          "uuid": "c3d5f9e7-6a4b-4d9f-a1b2-0e7f1a3b4c5d",
          "description": "Audit logging components capture and persist timestamped security events internally using system clocks without reliance on external time sources, thus inherently satisfying timestamp accuracy and integrity requirements.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b6f1a2f8-3d4e-4a6c-8f1a-2b9c7e4d9a2f",
      "control-id": "au-8smt.b",
      "description": "Control is applicable and inherently satisfied. The system sets the environment timezone to UTC explicitly for all operations, ensuring that audit records use Coordinated Universal Time (UTC) for timestamps. Timestamp formatting follows the ISO8601/RFC3339 standard, which supports inclusion of fixed local time offsets or local time offset as part of the timestamp, meeting the control requirements.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "au-8smt.b_smt_1",
          "uuid": "5e8f3a1b-8c2d-4f27-a5d7-9f6eadb7e3c9",
          "description": "The MinIO system enforces UTC timezone across all internal components via environment settings (internal/init/init.go and internal/init/init_darwin_amd64.go), ensuring all audit timestamps are recorded in Coordinated Universal Time. Timestamp formatting complies with ISO8601 and RFC3339 standards (internal/amztime/iso8601_time.go), allowing precise and consistent audit record timestamps including local time offsets if needed.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "edb9f2a9-62b7-4f4e-b110-3b5a8d3135e3",
      "control-id": "au-9smt.a",
      "description": "The control is applicable and satisfied through configuration. MinIO protects audit information and logging tools by controlling access via authentication and authorization mechanisms, and by securing audit log storage. Audit logs are generated with context-based filtering to prevent sensitive data exposure. However, cryptographic protections for audit logs (such as encryption at rest) are not explicitly handled by the code but are enabled through configuration and integration with external encryption and key management services. Access to audit logs is controlled by authenticated roles, and audit logging can be enabled or disabled via configuration parameters.",
      "set-parameters": [
        {
          "param-id": "au-9smt.a.audit_log_protection",
          "values": [
            "Audit logs are protected through role-based access control and authentication enforced by MinIO's IAM policies and admin privilege checks."
          ]
        },
        {
          "param-id": "au-9smt.a.audit_log_encryption",
          "values": [
            "Audit logs are stored on encrypted volumes managed by MinIO's server-side encryption with KMS integration."
          ]
        },
        {
          "param-id": "au-9smt.a.audit_log_access_control",
          "values": [
            "Access to audit logging configuration and audit logs is limited to authorized admin and security-engineer roles."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-9smt.a_smt_1",
          "uuid": "c3d4e7f2-998a-4db7-bf1a-8d5f4d1e2e77",
          "description": "Audit logging within MinIO is implemented with contextual filtering to exclude sensitive data and restricts audit events to configured targets only, ensuring confidentiality and integrity of audit information.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "au-9smt.a_smt_2",
          "uuid": "a6f7e1c8-3d4b-4f9b-9f3e-53d7b27a5c0d",
          "description": "Access to audit logs and the audit logging tools is restricted via MinIO's IAM policies and admin authentication checks, preventing unauthorized access, modification, or deletion of audit data.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "au-9smt.a_smt_3",
          "uuid": "f9e5a3bd-0a5d-4e9c-b0d7-8bfae7a1c8d3",
          "description": "Audit logs are stored on encrypted storage using MinIO's server-side encryption mechanisms with KMS support, ensuring audit data at rest is protected from unauthorized access and tampering.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "c2f32a0a-0b4f-4d3d-9f1a-7e7c5e8329d2",
      "control-id": "au-9smt.b",
      "description": "The control is applicable and satisfied through configuration. MinIO implements audit logging with structured and context-aware audit entries that capture security-relevant events including unauthorized access attempts. Alerts upon detection of unauthorized access, modification, or deletion of audit information are configured via external alerting mechanisms such as Prometheus AlertManager. The system generates audit logs and metrics that can trigger alerts based on configured thresholds, fulfilling the alerting requirement specified by the parameter au-09_odp.",
      "set-parameters": [
        {
          "param-id": "au-09_odp",
          "values": [
            "Prometheus AlertManager configured with webhook alerts for audit log anomalies and unauthorized access events"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-9smt.b_smt_1",
          "uuid": "d8bc7b2f-6e6c-4b3b-8f9f-3c4d1a7e5a1c",
          "description": "Audit logging functionality is implemented via structured, context-aware logs capturing user actions, system events, and security-relevant data. The audit mechanism supports filtering sensitive data and sending logs securely to defined targets. Integration with Prometheus metrics and AlertManager enables alerting on unauthorized access or modification events.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "au-9smt.b_smt_2",
          "uuid": "f1a1b9e4-55d4-4a3b-bd4a-256807982b79",
          "description": "Alerting configuration is managed externally via Prometheus AlertManager with webhook endpoints that receive audit anomaly notifications, triggering alerts based on predefined rules related to unauthorized access or modification of audit information.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d3a4b7e2-1f59-4c7e-b9f7-6d2e1f4b8a7c",
      "control-id": "au-9.2",
      "description": "The control is applicable and satisfied through configuration. Audit records are stored in a repository physically separate from the system components being audited by sending audit logs to external HTTP endpoints and databases (e.g., PostgreSQL, MySQL) configured via environment variables and secure targets. This separation is ensured by leveraging distinct physical or virtual systems for audit log storage, such as dedicated logging servers or managed database services. Configuration parameters defining these targets and authentication tokens are set to enforce this separation.",
      "set-parameters": [
        {
          "param-id": "au-9.2_prm_1",
          "values": [
            "Audit logs are transmitted to physically separate external HTTP endpoints and database servers for storage."
          ]
        },
        {
          "param-id": "au-9.2_prm_2",
          "values": [
            "Authentication tokens and client certificates are configured to secure communication with audit log repositories."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-9.2_smt_1",
          "uuid": "b5d6c258-7c8f-4a97-b25e-1a63a3e0c812",
          "description": "Audit logging is implemented to send audit records to configured external targets including HTTP endpoints and databases ensuring logical and physical separation from the audited systems. Authentication tokens and client certificates are used to secure these channels, configured via environment variables such as MINIO_AUDIT_LOGGER_HTTP_ENDPOINT and related secrets.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "au-9.2_smt_2",
          "uuid": "3f1a9d2d-0b47-4e4b-bb6c-86e0f2d6e7d2",
          "description": "Audit logs are stored in repositories that are maintained on physically or logically separate systems, such as external PostgreSQL or MySQL database servers, or dedicated logging servers, preventing co-location with the systems generating the logs.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "4d6f8b67-3f8a-4e0b-8c52-8e5e3b2e3a17",
      "control-id": "au-9.3",
      "description": "The control is applicable and satisfied through configuration. MinIO implements cryptographic mechanisms compliant with FIPS 140 standards (e.g., AES encryption and SHA-256 hashing) to protect the integrity of audit information and audit tools. Cryptographic protection is enforced via the use of FIPS-certified modules for both audit logs and audit tools. Configuration parameters ensure that cryptographic suites and algorithms are selected appropriately to secure audit data.",
      "set-parameters": [
        {
          "param-id": "au-9.3_prm_1",
          "values": [
            "FIPS 140-2 validated cryptographic modules enabled",
            "AES encryption for audit log data",
            "SHA-256 hashing for audit integrity verification",
            "TLS with FIPS-approved cipher suites for audit data transmission"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "au-9.3_smt_1",
          "uuid": "b9aa4f4d-7b2f-4f2e-b094-8c9c5d8bbf2d",
          "description": "Audit logging and audit tool integrity are protected using cryptographic mechanisms compliant with FIPS 140 standards, including AES encryption and SHA-256 hashing. The system leverages FIPS-certified cryptographic modules enforced through configuration, ensuring audit data confidentiality and integrity both at rest and in transit.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "9f1d3df7-3f2e-4d3f-9e1a-5ac9b22e1c6b",
      "control-id": "cm-11.2",
      "description": "The control is applicable and satisfied through configuration that restricts software installation to users with explicit privileged status. This is enforced by Kubernetes SecurityContextConstraints settings which disallow privileged operations and restrict capabilities, ensuring users cannot install software without privileged escalation.",
      "set-parameters": [
        {
          "param-id": "cm-11.2_prm_1",
          "values": [
            "Privileged operations disallowed via SecurityContextConstraints; capabilities SETUID, SETGID, MKNOD, KILL are dropped; user and filesystem groups are restricted to specified IDs"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-11.2_smt_1",
          "uuid": "6ee2d3b4-61f1-4e2a-9e4e-8ffb7f9f4bca",
          "description": "Kubernetes SecurityContextConstraints are configured to prevent privileged container operations, effectively restricting software installation to users with explicit privileged status. The configuration drops critical capabilities such as SETUID and SETGID, preventing privilege escalation required for software installation.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3e9f6f0b-2904-4e0a-8c5d-6a7d9e3a4f17",
      "control-id": "cm-14",
      "description": "The control is applicable and satisfied through configuration. The MinIO update process prevents installation of unsigned components by verifying the digital signature of update binaries using Minisign with a trusted public key configured via environment variables.",
      "set-parameters": [
        {
          "param-id": "cm-14_prm_1",
          "values": [
            "update binaries"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-14_smt_1",
          "uuid": "6c8a2d7f-9f5e-4eae-8d2e-75c4b0f9a2d0",
          "description": "The update mechanism employs Minisign signature verification using a public key provided as an environment variable. The binary update is only installed after successful signature verification, ensuring all installed components are digitally signed with organizationally approved certificates.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3e7b1a2f-0d4a-4c49-8366-c5f4d3a13745",
      "control-id": "cm-5",
      "description": "This control is applicable and satisfied through configuration. The system enforces logical access restrictions on changes via IAM policies, admin request validations, and role-based access controls. Physical access controls are managed externally but are documented and approved as part of operational procedures. Logical access restrictions are configurable via user and policy management settings within the system.",
      "set-parameters": [
        {
          "param-id": "cm-5.1_prm_1",
          "values": [
            "Access to change management functions is restricted by IAM policies and validated admin requests"
          ]
        },
        {
          "param-id": "cm-5.1_prm_2",
          "values": [
            "Changes require documented approval through role-based access controls enforced in configuration"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-5_smt_1",
          "uuid": "c9f1e9a2-d8a8-4f87-9bb9-61d3f4e0c2ba",
          "description": "Logical access restrictions for changes are enforced through IAM policy validation, admin request authentication, and role-based access control configurations. These configurations specify which users or roles can perform changes to the system, ensuring that all changes are approved and tracked.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "cm-5_smt_2",
          "uuid": "d4b9f6e3-5e7a-4f88-b0b0-4a5f9e8aee72",
          "description": "Physical access restrictions for change management are defined, documented, and approved as part of organizational security policies and operational procedures external to the system software but integrated into overall system security management.",
          "responsible-roles": [
            {
              "role-id": "security-manager"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d5a7a9b1-61b5-4c1f-b6a0-3e8f7c9e2e11",
      "control-id": "cm-5.1smt.a",
      "description": "The control is applicable and satisfied through configuration. MinIO enforces access restrictions using policies managed via its IAM system and external Open Policy Agent (OPA) integration (cm-05.01_odp). Access enforcement is performed by policy evaluation at request time, and audit records are generated via comprehensive logging mechanisms. The configuration of policies, OPA endpoint, and logging levels are configurable parameters.",
      "set-parameters": [
        {
          "param-id": "cm-05.01_odp",
          "values": [
            "OPA endpoint configured via environment variable MINIO_ACCESS_POLICY_OPA_ENDPOINT",
            "Authorization token set via MINIO_ACCESS_POLICY_OPA_AUTH_TOKEN",
            "Policy enforcement enabled with Rego policies for fine-grained access control",
            "Audit logs generated in JSON format with debug level logging"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-5.1smt.a_smt_1",
          "uuid": "0eb71d26-c2e0-4f3f-b25d-5a7a469a2fa3",
          "description": "Access control enforcement is implemented via MinIO IAM policies and external OPA policy agent integration, which evaluates user permissions using Rego policies. Configuration parameters include OPA endpoint URL and authorization token, managed securely as environment variables.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "cm-5.1smt.a_smt_2",
          "uuid": "a361e9d0-6f7c-43f5-bb29-5d4b9f144e55",
          "description": "Audit records are generated for all access requests and policy decisions. Logging is configured to output JSON-formatted audit logs with adjustable verbosity to support compliance and monitoring requirements.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "f0a5e87b-2a4b-4a2e-9f9f-3c89d5b5e4d1",
      "control-id": "cm-5.1smt.b",
      "description": "The control is applicable and satisfied through configuration. MinIO automatically generates structured audit records for enforcement actions such as access control and lifecycle management events. Audit logging configuration is managed via environment variables and the MinIO client tool, allowing enabling and targeting of audit logs. The system relies on configured logging targets and authentication tokens to ensure only authorized audit data is recorded and sent securely.",
      "set-parameters": [
        {
          "param-id": "cm-5.1smt.b_prm_1",
          "values": [
            "Audit logging enabled via MINIO_AUDIT_LOGGER_HTTP_ENDPOINT environment variable"
          ]
        },
        {
          "param-id": "cm-5.1smt.b_prm_2",
          "values": [
            "Audit targets configured with authentication tokens (AuthToken) for secure log transmission"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-5.1smt.b_smt_1",
          "uuid": "e2b30d92-1f49-4d43-b7e7-0f0d1f2a3c29",
          "description": "Audit records are automatically generated for access enforcement and lifecycle enforcement events using structured logging within the internal/logger package and related audit entry modules. These logs capture key attributes such as user claims, request paths, timestamps, and enforcement decisions.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "cm-5.1smt.b_smt_2",
          "uuid": "c4f0a7b8-d8e4-4e9f-a9bb-3c4b9f8d2a7b",
          "description": "Audit logging configuration is controlled via environment variables and MinIO client commands, enabling or disabling audit logs and defining audit targets. Authentication tokens (AuthToken) protect log endpoints, ensuring that audit records are transmitted securely only to authorized destinations.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b5a6f0c1-8d6e-4a27-9f2e-1a4c9a0f7b1d",
      "control-id": "cm-5.3",
      "description": "The control CM-05(03) Signed Components is applicable and satisfied through configuration. MinIO enforces integrity of software components by verifying signatures on critical binaries and components during deployment and updates. This verification is configured via deployment scripts and build pipelines that use cryptographic checksums and signature validation to ensure only signed components are installed and executed.",
      "set-parameters": [
        {
          "param-id": "cm-5.3_prm_1",
          "values": [
            "Component signature verification enabled via build and deployment pipelines using cryptographic checksums and signature validation"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-5.3_smt_1",
          "uuid": "f1d9a8c4-e7d2-4f3e-8a84-1c3a95e9d7b7",
          "description": "MinIO's build and deployment processes enforce signature validation on binaries, ensuring that only verified signed components are deployed. This is achieved by validating SHA256 checksums and cryptographic signatures for release artifacts as part of the CI/CD pipeline and update process.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a1d4f0c2-7e2b-4e3d-b3f9-72d1b9f4c1a6",
      "control-id": "cm-5.6",
      "description": "The control is applicable and satisfied through configuration. MinIO limits privileges to change software resident within software libraries by enforcing Kubernetes SecurityContextConstraints and restrictive file system permissions. The Helm chart configures the security context with specific user/group IDs and drops unnecessary capabilities, ensuring only authorized roles can modify software libraries.",
      "set-parameters": [
        {
          "param-id": "cm-5.6_prm_1",
          "values": [
            "securityContextConstraints: enabled",
            "runAsUser: 1000",
            "fsGroup: 1000",
            "capabilitiesDropped: [KILL, MKNOD, SETUID, SETGID]"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-5.6_smt_1",
          "uuid": "c4f2a8e7-56d9-4c14-a56b-3f9b2e4a9d42",
          "description": "Kubernetes SecurityContextConstraints configured via Helm templates restrict privileges for the container user and group IDs, and drop privileged capabilities to prevent unauthorized modifications to software libraries.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "cm-5.6_smt_2",
          "uuid": "f87a3bc9-9c2e-4e91-8e9d-e7fdd4f7b8a3",
          "description": "File system permissions and Kubernetes RBAC policies collectively limit write access to software libraries only to authorized system administrators and automated deployment processes.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a8f3b17d-4e5f-4f92-b7e9-0d2f740b1d43",
      "control-id": "cm-6smt.a",
      "description": "The control is applicable and satisfied through configuration. Configuration settings for MinIO components enforce restrictive security context constraints in Kubernetes (e.g., disallowing privileged operations, specifying fsGroup and runAsUser). Sensitive keys and TLS secrets are managed via Kubernetes Secrets, ensuring secure handling of credentials and encryption keys. These configuration settings establish and document restrictive modes consistent with operational requirements as per {{ cm-06_odp.01 }}.",
      "set-parameters": [
        {
          "param-id": "cm-6smt.a_prm_1",
          "values": [
            "SecurityContextConstraints restrict privileged capabilities and enforce specific user/group IDs in Kubernetes pods",
            "Kubernetes Secrets store sensitive data such as root user credentials and TLS certificates securely",
            "Configuration files and Helm templates document and enforce these settings"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-6smt.a_smt_1",
          "uuid": "1c9bde2f-8a29-4b7a-9f8b-4f6e47a9e3c4",
          "description": "The helm/minio/templates/securitycontextconstraints.yaml enforces restrictive security contexts by limiting host IPC, network, and PID capabilities and mandates specific file system group and user IDs, preventing privileged container operations. This limits attack surface and enforces the most restrictive mode consistent with operational needs.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "cm-6smt.a_smt_2",
          "uuid": "d46e6e59-9f0f-4a10-9d1a-7f8f6b54aeb0",
          "description": "Kubernetes Secrets defined in helm/minio/templates/secrets.yaml securely store sensitive credentials like root user and password, and TLS certificates, supporting secure configuration management and encryption key protection consistent with compliance requirements.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "cm-6smt.a_smt_3",
          "uuid": "6f3c7b10-7b71-4e7e-9d54-c5f0d77a8e0e",
          "description": "The configuration management system in internal/config/ validates and manages sensitive keys and environment variables, enforcing secure handling and preventing misconfiguration, ensuring restrictive and secure operational modes.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "f4b2d8a1-8b9f-4e7c-bd3a-2d4f9a1e3c72",
      "control-id": "cm-6smt.b",
      "description": "The control is applicable and satisfied through configuration. MinIO implements configuration settings management via environment variables, Kubernetes secrets, and configuration files that enable secure management of authentication credentials, TLS settings, encryption keys, and access policies. Sensitive information such as root user credentials and KMS keys are managed through Kubernetes Secrets. TLS can be enabled and configured for encrypted communication. Configuration changes are validated, and sensitive data is redacted from outputs to maintain confidentiality.",
      "set-parameters": [
        {
          "param-id": "cm-6smt.b_prm_1",
          "values": [
            "Configuration settings are managed through environment variables and Kubernetes Secrets for sensitive data (e.g., MINIO_ROOT_USER, MINIO_ROOT_PASSWORD, MINIO_KMS_SECRET_KEY)."
          ]
        },
        {
          "param-id": "cm-6smt.b_prm_2",
          "values": [
            "TLS settings are configurable and can be enabled with certificate and key secrets to secure data in transit."
          ]
        },
        {
          "param-id": "cm-6smt.b_prm_3",
          "values": [
            "Configuration validation functions enforce correct and secure settings, including input validation and error handling."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-6smt.b_smt_1",
          "uuid": "7c213e3d-f3a5-4a9c-9f1c-3dcb80b8a621",
          "description": "Configuration files, environment variables, and Kubernetes Secrets are used to implement and enforce secure configuration settings, including credentials and TLS parameters.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "cm-6smt.b_smt_2",
          "uuid": "b8f0bb1d-2b6f-4e1a-9f1f-1c3e5cc4ef3a",
          "description": "Input validation and error handling in configuration management code ensure that invalid or insecure settings are rejected, mitigating misconfiguration risks.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "cm-6smt.b_smt_3",
          "uuid": "1e5d4f7a-11f4-4a62-9a6b-9d7f02a3c0b7",
          "description": "Sensitive information such as root credentials and KMS keys are stored securely in Kubernetes Secrets and are never hardcoded or stored in plaintext configuration files.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3d2f9e5b-9a7d-4f3c-9b8f-2d5e1c4b7a9c",
      "control-id": "cm-6smt.c",
      "description": "This control is applicable and satisfied through configuration management of deviations from established configuration settings. MinIO documents and approves configuration deviations related to environment variables and Helm chart overrides, ensuring compliance with established policies and operational directives.",
      "set-parameters": [
        {
          "param-id": "cm-06_odp.02",
          "values": [
            "Environment variables and Helm chart configuration files"
          ]
        },
        {
          "param-id": "cm-06_odp.03",
          "values": [
            "Organizational policy and risk assessment documentation"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-6smt.c_smt_1",
          "uuid": "c1a6f4e2-5b7d-4d97-8a35-8e9b3c89b7e0",
          "description": "Deviations from established configuration settings are identified and documented via version-controlled Helm charts and environment variable management. Approval processes involve security engineering review aligned with organizational risk assessments.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "9e2f4b3d-7a1b-4f5d-bf3a-2c9d1e7b8f4a",
      "control-id": "cm-6smt.d",
      "description": "The control is applicable and satisfied through configuration management and monitoring implemented in the MinIO system. Configuration changes to critical settings such as users, policies, and service accounts are controlled via Helm templates and validated programmatically. Encryption of sensitive configuration data and structured logging supports audit trails. Environment variables and Kubernetes Secrets are used to protect sensitive data. Change control includes validation and logging mechanisms to track and monitor configuration modifications.",
      "set-parameters": [
        {
          "param-id": "cm-6smt.d_prm_1",
          "values": [
            "Configuration changes are managed through Helm templates and Kubernetes Secrets.",
            "Sensitive configuration data is encrypted using KMS integration during load and save operations.",
            "Structured logging captures configuration change events for audit and compliance.",
            "Validation of configuration inputs prevents unauthorized or invalid changes."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-6smt.d_smt_1",
          "uuid": "c1d5e8f7-4b3a-4a87-9f41-0fd1b4a5e7d9",
          "description": "Configuration management is enforced through Helm charts which template user, policy, and service account configurations. Kubernetes Secrets are used to securely store sensitive information, including TLS certificates and root credentials. This ensures that configuration changes are controlled and traceable.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "cm-6smt.d_smt_2",
          "uuid": "a8f4c9e2-3b7d-4c12-9b2e-5e4f6d7a8c3b",
          "description": "The MinIO server encrypts sensitive configuration data using an integrated KMS and maintains configuration history to allow rollback and auditing. Configuration loading and saving processes include error handling and cryptographic validation to maintain integrity and confidentiality.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "cm-6smt.d_smt_3",
          "uuid": "d32b4e6e-9f31-4a2e-b3f7-1a6d4a7a293c",
          "description": "Structured logging captures configuration change events and errors, aiding in monitoring and compliance audits. Logs are generated for administrative configuration actions, including validation failures and unauthorized attempts, providing traceability and accountability.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "5a3c9a2e-2f3e-4d19-8e8d-53f5e2a70d12",
      "control-id": "cm-7smt.a",
      "description": "The control cm-7smt.a is applicable and is satisfied through configuration. The system is configured to provide only the least required functionality as defined by the parameter cm-07_odp.01. This is enforced via user and policy management in MinIO, restricting exposed features and permissions according to defined IAM policies and roles.",
      "set-parameters": [
        {
          "param-id": "cm-07_odp.01",
          "values": [
            "Authorized S3 API operations and configured IAM policies limiting access scope"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-7smt.a_smt_1",
          "uuid": "b8f7e2e7-3a86-4c76-b631-6c7e2e0f4d9e",
          "description": "MinIO is configured to enforce least functionality by restricting available operations through IAM policies and service account permissions. Bucket initialization, user creation, and policy assignment are controlled via configuration templates, ensuring only necessary features are enabled. This is supported by Kubernetes security context constraints that limit pod capabilities and restrict privileged operations.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "e4a9f3c6-2f1b-4e8d-bb12-5d9b3c7a9f2e",
      "control-id": "cm-7smt.b",
      "description": "This control is applicable and satisfied through configuration. Network policies and Kubernetes configurations restrict and prohibit the use of unauthorized functions, ports, and protocols by explicitly allowing only designated API and console ports. The parameters specifying prohibited ports and protocols are set via network policy templates and Cilium network policies, effectively enforcing least functionality.",
      "set-parameters": [
        {
          "param-id": "cm-7_prm_2",
          "values": [
            "All ports and protocols except TCP ports associated with MinIO API and console (e.g., minioAPIPort, minioConsolePort) are restricted via Kubernetes NetworkPolicy and Cilium NetworkPolicy configurations"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-7smt.b_smt_1",
          "uuid": "c4a0e8f2-9d45-4f1b-9a1c-2b0e8f8165f0",
          "description": "Kubernetes NetworkPolicy and Cilium NetworkPolicy configurations explicitly permit ingress and egress traffic only on specific TCP ports required for MinIO operation, effectively prohibiting other ports and protocols. This enforces least functionality at the network layer.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "2c6f8b0e-c9e7-4587-8f8d-4d552f768a3f",
      "control-id": "cm-7.2",
      "description": "The control is applicable and satisfied through configuration by preventing unauthorized program execution via configured security context constraints and runtime policies that restrict executable capabilities and privilege escalation in the Kubernetes deployment.",
      "set-parameters": [
        {
          "param-id": "cm-07.02_odp.01",
          "values": [
            "SecurityContextConstraints configured to disallow privileged escalation, restrict capabilities (KILL, MKNOD, SETUID, SETGID), enforce runAsUser and fsGroup IDs, and disallow host IPC, network, and PID namespaces."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-7.2_smt_01",
          "uuid": "9b68f8a9-3a4e-4e8f-8c0b-4a1c3e7c5b37",
          "description": "The Kubernetes security context constraints are configured to prevent program execution outside of the allowed security boundaries by disallowing privileged containers, dropping specific Linux capabilities (KILL, MKNOD, SETUID, SETGID), and restricting execution to designated user and group IDs. This effectively prevents unauthorized or arbitrary program execution within the container environment.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "f9a4b3e0-8c50-4a31-b3db-d9f9b4a2e4c1",
      "control-id": "cm-7.5smt.a",
      "description": "The control is applicable and is satisfied through configuration. The system enforces an allow-by-exception policy for authorized software by maintaining and identifying explicitly approved software instances, as defined by the parameter cm-07.05_odp.01. This parameter specifies the approved software list which is enforced by MinIO's policy and configuration management.",
      "set-parameters": [
        {
          "param-id": "cm-07.05_odp.01",
          "values": [
            "Authorized software includes MinIO server binaries signed and verified via official release channels, container images validated via trusted registries, and explicitly approved plugins and modules listed in the deployment manifest."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-7.5smt.a_smt",
          "uuid": "2d3b8c6e-3f4f-4a4e-9e8b-5f0d741f1c72",
          "description": "Authorized software is identified through strict configuration management processes that include cryptographic verification of MinIO binaries and container images, policy enforcement via Kubernetes RBAC, and explicit whitelisting of plugins and extensions. The allowed software list (cm-07.05_odp.01) is maintained by the security engineer and DevOps teams and integrated into deployment pipelines to ensure compliance with the allow-by-exception requirement.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b5f96aa1-c2b6-4d5b-8373-2f5e8a8c9f6b",
      "control-id": "cm-7.5smt.b",
      "description": "The control cm-7.5smt.b is applicable and satisfied through configuration. MinIO employs a deny-all, permit-by-exception policy for authorized software execution by restricting executable permissions and controlling allowed binaries through configuration and deployment policies. The system enforces strict access controls and limits execution to authorized software via container and orchestration configurations.",
      "set-parameters": [
        {
          "param-id": "cm-7.5smt.b_prm_1",
          "values": [
            "Deny-all execution policy with allow-by-exception enforced via container security contexts, Kubernetes Pod Security Policies, and restricted image registries"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-7.5smt.b_smt_1",
          "uuid": "8f62a2e4-54c7-4f0f-8b18-6d7b50e9d02c",
          "description": "Execution of software is restricted by container runtime and Kubernetes security policies that permit only authorized container images and binaries to run. Helm charts and OpenShift SCC restrict capabilities and enforce file system permissions, preventing unauthorized software execution.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "cm-7.5smt.b_smt_2",
          "uuid": "c4f3d6d2-9f09-4d6a-9e0c-7a8d563fe0b1",
          "description": "System binaries and application components are deployed from verified sources with checksum validation (e.g., SHA-256) and signature verification (Minisign) to ensure that only authorized software is executed, mitigating risks of unauthorized or malicious software.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "cm-7.5smt.b_smt_3",
          "uuid": "a29d3f1b-7c47-4b84-8f21-1f5cd269a0e8",
          "description": "File system permissions and Kubernetes security contexts restrict execution rights to specific users and processes, effectively denying all except explicitly permitted software execution.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "c5b4f3a2-3d08-4f2d-9ec9-ae1f5b9d7d2b",
      "control-id": "cm-7.5smt.c",
      "description": "The control is applicable and satisfied through configuration. The system maintains an authorized software list that is regularly reviewed and updated as part of the configuration management process, ensuring only approved software runs in the environment. This list is defined and enforced via the configuration parameter cm-07.05_odp.02, which specifies authorized software programs. Regular reviews are performed by the security team to update this list based on operational needs and threat intelligence.",
      "set-parameters": [
        {
          "param-id": "cm-07.05_odp.02",
          "values": [
            "minio-server",
            "minio-client",
            "kubectl",
            "helm",
            "openssl",
            "bash",
            "coreutils"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "cm-7.5smt.c_smt_1",
          "uuid": "5e2d3c4f-7f9b-4b18-8d9a-3a7c8a862d8f",
          "description": "Authorized software programs are managed via configuration parameter cm-07.05_odp.02. The security engineering team reviews this list quarterly and updates it to include necessary software and remove unauthorized or deprecated software. Enforcement is achieved through configuration management tools and runtime checks ensuring only listed software is installed and executed.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d2c4a0cc-8a8f-4c8a-b761-9d1e1b6d5a6b",
      "control-id": "ia-11",
      "description": "The control ia-11 is applicable and satisfied through configuration. MinIO requires users to re-authenticate when their temporary session credentials expire, which is configurable via session duration parameters in the STS and OpenID Connect settings. The re-authentication is enforced by the system by expiring JWT tokens and session policies after a configurable timeout, requiring users to obtain new credentials.",
      "set-parameters": [
        {
          "param-id": "ia-11_odp",
          "values": [
            "upon expiration of temporary security credentials (default 1 hour, configurable between 15 minutes and 365 days)"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-11_smt_1",
          "uuid": "8383b792-9b3a-4f1e-9b30-1a7f8f0c7d91",
          "description": "MinIO enforces re-authentication by expiring JWT tokens and temporary credentials issued via STS mechanisms after a configurable duration. The default session duration is one hour, configurable through environment variables or admin API. Users must obtain new tokens post expiration to continue accessing the system.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-11_smt_2",
          "uuid": "7f14e5f0-e4a7-4f2f-9a5d-4bbf2c6a4a9d",
          "description": "Re-authentication is triggered automatically upon expiry of session tokens validated by the system's IAM and STS service, leveraging JWT expiration claims and session policy enforcement mechanisms.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3f8a1d7e-c9c4-4b1f-b0c5-bf6f9246d7a3",
      "control-id": "ia-2",
      "description": "This control is applicable and satisfied through a combination of configuration and implementation. MinIO uniquely identifies and authenticates organizational users via integration with multiple identity providers including Built-in user store, LDAP, OpenID Connect (OIDC), and custom Identity Management Plugins. User identities are validated through credential checks, JWT tokens, OAuth 2.0 client credentials, and session tokens. The system associates these unique identities with processes acting on behalf of users via IAM policies and session credentials. Configuration parameters such as token expiration and identity provider endpoints are set to enforce secure authentication.",
      "set-parameters": [
        {
          "param-id": "ia-2.1_prm_token_expiry",
          "values": [
            "3600"
          ]
        },
        {
          "param-id": "ia-2.2_prm_identity_providers",
          "values": [
            "builtin",
            "ldap",
            "openid",
            "custom-plugin"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-2_smt_authentication_methods",
          "uuid": "a8c1f6b2-9e0f-4f96-9a4e-2f9d9d2a3f27",
          "description": "MinIO authenticates organizational users using multiple providers: built-in user database, LDAP with secure binding over TLS, OpenID Connect with JWT validation, and custom identity management plugins. Authentication requests include validation of credentials, tokens, and claims, ensuring unique identification of users.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-2_smt_user_association",
          "uuid": "dd7f4f9a-c7c1-4e0a-9c3c-0d0c3f8a7f49",
          "description": "Authenticated user identities are associated with processes via IAM policies and temporary security credentials issued by the Security Token Service (STS). Session tokens and JWT claims provide a verifiable mapping between users and their actions, enabling fine-grained access control and auditability.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-2_smt_configuration_management",
          "uuid": "e7b5c3d1-3f4b-4aee-9b99-4b7b1d6b9c13",
          "description": "Configuration parameters such as token expiration time (default 1 hour), supported identity providers, and secure communication endpoints are set through environment variables and MinIO admin APIs. This configuration ensures that authentication is enforced consistently and securely across all user interactions.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b8e3a5b0-3b2d-4d3c-bf0e-2f2f88f9a8d1",
      "control-id": "ia-2.1",
      "description": "The control is applicable and satisfied through configuration. MinIO supports multi-factor authentication (MFA) for privileged accounts via integration with external identity providers such as LDAP, OpenID Connect, and other IAM mechanisms. MFA enforcement is achieved by configuring the external identity provider and associating MFA policies with privileged users. The system relies on these configurations rather than inherent defaults.",
      "set-parameters": [
        {
          "param-id": "ia-2.1_prm_1",
          "values": [
            "MFA enforced via external Identity Provider (e.g., LDAP with TLS, OpenID Connect with MFA enabled)"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-2.1_smt",
          "uuid": "d2a7c9c7-9c3f-4e4a-9bfc-6f1a30b8c4b2",
          "description": "Multi-factor authentication is implemented by integrating MinIO with external identity providers that support MFA, such as LDAP with secure TLS connections and OpenID Connect providers configured to require MFA for privileged accounts. Privileged accounts are managed through IAM policies and user roles with enforced MFA requirements at the IDP level.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3e7b9a9f-0d8c-4f7e-9a96-4f2d9c8b3c5f",
      "control-id": "ia-2.2",
      "description": "Control is applicable and satisfied through configuration. MinIO supports multi-factor authentication (MFA) via integration with external Identity Providers (IDPs) including LDAP, OAuth 2.0, OpenID Connect, and SAML, which provide MFA capabilities. MFA is enforced by configuring these external IDPs accordingly. The system's internal IAM supports strong authentication policies but relies on configuration to enable and enforce MFA for non-privileged accounts.",
      "set-parameters": [
        {
          "param-id": "ia-2.2_prm_1",
          "values": [
            "MFA is enabled via external IDP integrations such as LDAP with TLS, OAuth 2.0, OIDC, and SAML."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-2.2_smt_1",
          "uuid": "d4b1f037-4f7a-45e9-8e3f-52a2b3e0c6d1",
          "description": "MinIO integrates with external identity providers that support MFA, including LDAP over TLS, OAuth 2.0, OpenID Connect, and SAML protocols. MFA enforcement is configured at the IDP level, and MinIO leverages these authentication flows to provide multi-factor authentication for non-privileged accounts.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-2.2_smt_2",
          "uuid": "a7b6c6d9-5b4e-4a3a-9f10-78c5e9b2d284",
          "description": "Configuration files and environment variables specify integration endpoints and authentication mechanisms to enforce MFA through external providers. Internal IAM policies support access control but require external MFA configurations to fulfill multi-factor authentication requirements for non-privileged accounts.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "7d7214b1-3a8e-4ed8-9e92-5a2c0a8d9f3a",
      "control-id": "ia-2.3",
      "description": "This control is applicable and satisfied through configuration. Local access to privileged accounts is restricted by enforcing authentication mechanisms integrated with the IAM system, which manages privileged user credentials and session tokens. Access is controlled via policies that limit local privileged account usage to authorized personnel only.",
      "set-parameters": [
        {
          "param-id": "ia-2.3_prm_1",
          "values": [
            "Local privileged account access is controlled via IAM policies enforcing strict authentication and authorization, including session token validation and MFA where applicable."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-2.3_smt_1",
          "uuid": "e1f2c9a8-3b6f-4a2d-bd94-998d7f4d0c3b",
          "description": "Local privileged accounts are managed through MinIO's IAM system, which enforces authentication via access/secret keys and supports LDAP and external identity providers. Session tokens are validated to ensure only authorized local users gain privileged access.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-2.3_smt_2",
          "uuid": "b9d6e47e-7f3a-4aeb-b2ce-5a8d8e3f1284",
          "description": "Configuration parameters enforce that local privileged access requires valid credentials mapped to IAM policies with appropriate permissions. Logs of privileged access attempts are maintained for audit and compliance purposes.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d4a5c4d9-0d11-4e7b-9a6b-4aebd6f4e918",
      "control-id": "ia-2.4",
      "description": "The control IA-2(04) is applicable and satisfied through configuration. MinIO enforces local access restrictions on non-privileged accounts via IAM policies and role-based access control. The configuration parameters include enabling policy enforcement on local accounts and specifying allowable authentication methods. These are set through MinIO's IAM policy configuration and identity provider integrations.",
      "set-parameters": [
        {
          "param-id": "ia-2.4_prm_1",
          "values": [
            "IAM policies enforce local access restrictions for non-privileged accounts"
          ]
        },
        {
          "param-id": "ia-2.4_prm_2",
          "values": [
            "Local access allowed only with valid access and secret keys, no elevated privileges"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-2.4_smt_1",
          "uuid": "7e1a4f5a-8d3b-4d2c-a91b-2b5c62ec9e1e",
          "description": "Local access to non-privileged accounts is controlled through MinIO's IAM system, which validates credentials and enforces policies that prevent privilege escalation or unauthorized local access.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-2.4_smt_2",
          "uuid": "2f4cb3fb-41ea-4f5a-b5b0-8a1f8b9f8b4a",
          "description": "Configuration parameters in IAM policy and identity provider settings ensure that local login attempts by non-privileged accounts are permitted only under enforced access controls.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d84a1f3b-cd7e-4d3f-8e4f-72f0a0f6a5b0",
      "control-id": "ia-2.5",
      "description": "This control is applicable and inherently satisfied. MinIO employs a multi-user admin system where all users, including those accessing shared accounts or resources, are individually authenticated via robust mechanisms such as access keys, external identity providers (LDAP, OIDC), and JWT tokens. Individual authentication is enforced before access is granted, ensuring that shared authentication is not used without user-specific validation.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "ia-2.5_smt_1",
          "uuid": "f9c5a317-7f44-4fbb-9e2f-2d8e4d24ee6a",
          "description": "MinIO's multi-user admin system requires each user to authenticate individually using access keys or federated identity tokens before accessing any shared resources or accounts. Authentication methods include built-in credentials, LDAP, OpenID Connect, and JWT validation, ensuring unique user identities are verified prior to authorization.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "f3b9e2d8-7d94-4a8e-bb45-88e6f687de4a",
      "control-id": "ia-2.8",
      "description": "Control is applicable and satisfied through configuration. The system implements replay-resistant authentication mechanisms for access to OpenID Connect identity providers and other authentication endpoints by leveraging OAuth2 token issuance, JWT with limited lifetime, use of SCRAM with salted challenge response for Kafka authentication, and secure token validation with expiration checks. Replay resistance is enforced via short-lived tokens, nonce and timestamp validations inherent in OAuth2/OpenID flows, and cryptographic protections such as SHA-256/SHA-512 hashing in SCRAM. These settings are configurable through identity provider parameters.",
      "set-parameters": [
        {
          "param-id": "ia-02.08_odp_prm_1",
          "values": [
            "OAuth2 with JWT tokens having configurable expiration (default 3 hours)",
            "SCRAM-SHA-256 and SCRAM-SHA-512 for Kafka client authentication",
            "Use of SASLprep normalization for usernames and passwords",
            "OpenID Connect token expiry and refresh enforcement"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-2.8_smt_1",
          "uuid": "9a1c1e4b-4d2f-4c5c-b0e5-9a527da4d6f7",
          "description": "The OpenID Connect provider configuration enforces replay resistance by issuing JWT tokens with limited validity periods (e.g., 3 hours). Tokens are validated for expiration and unauthorized reuse is prevented by rejecting expired tokens. This is implemented in the internal/config/identity/openid/provider/provider.go and internal/config/identity/openid/openid.go modules.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-2.8_smt_2",
          "uuid": "c5de3a7e-3b19-4f56-9b3f-0c1e7a4b8f4a",
          "description": "Kafka authentication uses SCRAM mechanisms (SHA-256 and SHA-512) with SASLprep normalization and salted challenge-response protocols to ensure replay resistance and mitigate credential replay attacks. This implementation is found in internal/event/target/kafka_scram_client_contrib.go and internal/logger/target/kafka/kafka_scram_client_contrib.go.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-2.8_smt_3",
          "uuid": "7d978d05-2e2b-4f25-9d9a-832e6f9c6f48",
          "description": "The STS and OpenID related components enforce replay-resistant authentication through strict token validation, expiration checks, and enforcement of secure cryptographic protocols such as OAuth2 and JWT standards. Token refresh and revocation mechanisms are in place as per the cmd/sts-handlers.go and docs/sts/dex.md descriptions.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "af3d5f8b-3e24-4d9c-90e1-5a3b7f1c9e2f",
      "control-id": "ia-2.9",
      "description": "This control is applicable and satisfied through configuration. MinIO enforces replay-resistant network access to non-privileged accounts by using AWS Signature Version 4 for request authentication, which includes cryptographic nonce and timestamp mechanisms to prevent replay attacks. The system requires all network requests to be signed with this protocol, ensuring replay resistance. Configuration parameters specify the enforcement of AWS v4 signing for all access to non-privileged accounts.",
      "set-parameters": [
        {
          "param-id": "ia-2.9_prm_1",
          "values": [
            "AWS Signature Version 4 enforced for all network access by non-privileged accounts"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-2.9_smt_1",
          "uuid": "2b1f7e3a-8a96-49f2-bd56-9e22e5c4a991",
          "description": "MinIO uses AWS Signature Version 4 to authenticate all network requests. This signing protocol includes timestamp and nonce elements that provide replay resistance by invalidating requests with expired or reused signatures.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-2.9_smt_2",
          "uuid": "6d4f7caa-fd3b-4d7b-82e2-7eae9c4b4c3f",
          "description": "Configuration enforces the use of AWS Signature Version 4 for all non-privileged user network access, ensuring cryptographic replay resistance is applied uniformly.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "7a9b8c15-6d4e-4f72-8e6f-e8f1c9d5b2a4",
      "control-id": "ia-3.1",
      "description": "Control ia-3.1 is applicable and satisfied through configuration. The system authenticates the identity provider before establishing a secure, cryptographically based bidirectional connection using TLS with client certificate authentication. Mutual TLS (mTLS) ensures bidirectional cryptographic authentication of both client and server during connection establishment.",
      "set-parameters": [
        {
          "param-id": "ia-3.1_prm_1",
          "values": [
            "Mutual TLS (mTLS) with client certificates for cryptographic bidirectional authentication"
          ]
        },
        {
          "param-id": "ia-3.1_prm_2",
          "values": [
            "Identity Provider (IDP) authenticated via OAuth2/OpenID Connect token validation"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-3.1_smt_1",
          "uuid": "d4e4a1c0-f3e5-4b9a-9e5b-0e9e8d6a7f32",
          "description": "The system uses OAuth2/OpenID Connect tokens issued by a verified identity provider, validated on each connection attempt. Prior to establishing the connection, the identity provider's token is authenticated ensuring authorized access.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-3.1_smt_2",
          "uuid": "a1b3c7d2-9e3f-4d66-8c5f-3e7b1d4e2f91",
          "description": "Connections are established using TLS with mutual authentication (mTLS), ensuring cryptographically based bidirectional authentication. Both client and server verify each other's certificates before any data exchange occurs.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "2f3c8e7e-4a1a-4a56-9c3f-9f2a1e7b4d12",
      "control-id": "ia-4smt.a",
      "description": "This control is applicable and inherently satisfied. Identifier Management in MinIO is enforced through integration with external Identity Providers (OIDC, LDAP) and internal IAM systems that require explicit authorization before assigning identifiers to individuals, groups, roles, or devices. The system validates admin requests and permissions before any identifier assignment, ensuring that authorization from the relevant owner or policy (ia-04_odp.01) is always obtained.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "ia-4smt.a_smt_1",
          "uuid": "d2e7c8b3-fb4a-4f7f-8c71-3e9e0f3b5a7c",
          "description": "Identifier assignment is controlled through validated admin requests checked by the global IAM system, which enforces authorization policies. The system integrates with external identity providers and uses policy enforcement to ensure only authorized personnel can assign or modify identifiers.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3c4b8f4a-2f1d-4d5e-b3f0-6a5d1f2b7a99",
      "control-id": "ia-4smt.b",
      "description": "The control ia-4smt.b is applicable and inherently satisfied. MinIO employs structured and validated identifier management across multiple components, including ARN resource identifiers, LDAP distinguished names, and OpenID Connect claims. Input validation via regex and parsing logic ensures identifiers uniquely and securely identify individuals, groups, roles, services, or devices. External identity providers and internal IAM systems consistently enforce identifier uniqueness and format correctness, satisfying the control inherently without requiring additional configuration.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "ia-4smt.b_smt_1",
          "uuid": "9a7e0c4d-5e3f-4d8f-bb7c-6dbfbc3f35d2",
          "description": "MinIO's internal ARN implementation strictly validates resource identifiers using regex and parsing functions to ensure only well-formed identifiers representing users, roles, and services are accepted, preventing injection and misuse.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-4smt.b_smt_2",
          "uuid": "d1f6ab4e-cb9c-4b5d-9a18-3b7d7d42d6e0",
          "description": "LDAP integration enforces identifier uniqueness and validation of distinguished names (DNs) to ensure proper identification of users and groups within the system, supporting secure authentication and authorization.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-4smt.b_smt_3",
          "uuid": "f7e5d7a0-8c77-4a9d-b1ed-9e2f59cdf926",
          "description": "OpenID Connect provider configuration mandates unique client IDs and secure handling of role policies, ensuring consistent and secure identification of users and roles across authentication transactions.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "c3a0b6d5-7d6a-4e38-9b8f-0a3f8c4e7d96",
      "control-id": "ia-4smt.c",
      "description": "This control is applicable and satisfied through configuration. MinIO assigns identifiers to users, groups, roles, services, and devices via its IAM system, integrating with external identity providers (OpenID, LDAP) and custom token validation. Identifier assignment is enforced through validated ARNs and role policies, with configurations specifying user IDs, group memberships, and role mappings. Input validation and error handling in identifier parsing ensure identifiers are assigned only to intended entities. Configuration parameters govern role and user identifiers, ensuring compliance with the control.",
      "set-parameters": [
        {
          "param-id": "ia-4smt.c_prm_1",
          "values": [
            "IAM user and group identifiers are assigned via validated ARNs and role policies configured in MinIO IAM and external IDPs."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-4smt.c_smt_1",
          "uuid": "1d2f9b8c-4b2e-4e9a-839f-d5a1b2e7a436",
          "description": "Identifier assignment is implemented through the IAM system supporting users, groups, and roles, including integration with OpenID Connect and LDAP providers. ARNs are parsed and validated using regex to ensure correctness and prevent injection attacks. Role policies are configured to map identifiers to permissions securely.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-4smt.c_smt_2",
          "uuid": "a4fbb5d2-5e2a-4d9a-9d2d-53e8c7e1a7f1",
          "description": "Configuration parameters in IAM and identity provider settings (e.g., RolePolicy, user/group IDs) enforce correct assignment of identifiers. These parameters are managed via environment variables, Helm charts, or MinIO admin API to ensure only intended individuals, groups, and roles receive identifiers.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "4bf60d3f-3f29-4d66-8f4a-7d8f4e8b5a17",
      "control-id": "ia-4smt.d",
      "description": "The control is applicable and satisfied through configuration. The system enforces prevention of reuse of identifiers for the identity provider parameters (ia-04_odp.02) by managing unique TargetIDs within the MinIO Object Storage stack. The configuration and validation logic in the codebase ensure that identifiers such as TargetID are unique and not reused improperly, though this enforcement is achieved through configuration and code validation rather than inherent system design alone.",
      "set-parameters": [
        {
          "param-id": "ia-4smt.d_prm_1",
          "values": [
            "TargetID uniqueness enforced via internal validation and set management"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-4smt.d_smt_1",
          "uuid": "e9b1f7a7-650e-4d9a-8c3c-a3fbd45e2d74",
          "description": "The internal code managing TargetID sets and event target identifiers performs checks to prevent duplicate identifier reuse by validating and managing unique TargetIDs. This is implemented in the internal/event/targetid.go and internal/event/targetidset.go components, which ensure identifiers are unique and properly parsed, preventing reuse in event notification contexts.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a2d9c5f0-7b8f-4d9f-bd6e-d7c8b7a6f5e2",
      "control-id": "ia-5smt.a",
      "description": "This control is applicable and satisfied through configuration. The MinIO system verifies the identity of the individual or entity receiving authenticators during initial distribution by integrating with external identity providers (OIDC/Dex/Keycloak) that enforce identity verification via OAuth 2.0 client credentials, JWT claims validation, and secure token issuance. Configuration parameters such as client IDs and secrets are managed securely, and authentication flows ensure that only authorized parties receive authenticators.",
      "set-parameters": [
        {
          "param-id": "ia-5smt.a_prm_1",
          "values": [
            "Identity verification is enforced through OAuth 2.0 client credentials and JWT validation using configured client IDs and secrets."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5smt.a_smt_1",
          "uuid": "c3f4d2b8-4a1e-4a1a-9f6b-55e9a4d7f7c9",
          "description": "The system uses OAuth 2.0 client credentials flow with external IDPs (Keycloak, Dex, WSO2) which require client ID and secret authentication before issuing JWT authenticators. JWT tokens include claims such as issuer, audience, and expiration to confirm identity. This mechanism ensures that authenticators are only distributed after verifying the identity of the requester.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.a_smt_2",
          "uuid": "f19d4c7e-0b5a-4e4b-8f90-8a3e2f2a1c4b",
          "description": "Configuration parameters such as ClientID and ClientSecret are stored securely (e.g., environment variables, Kubernetes secrets) and used to authenticate clients during initial authenticator issuance. These parameters are validated and refreshed as needed, ensuring ongoing compliance with identity verification requirements.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "2f7c1e7a-8a0b-4f9e-9f0c-0a6b2b1d9f25",
      "control-id": "ia-5smt.b",
      "description": "This control is applicable and satisfied through configuration. Initial authenticator content is established by integrating with external identity providers using OAuth 2.0 and OpenID Connect protocols. The system generates and manages JWT tokens with RSA and ECDSA SHA-3 signing methods, ensuring cryptographic integrity of authenticators. Configurations include client IDs, secrets, and signing algorithms, which are parameterized. Secrets such as client secrets are handled securely and marked sensitive. Logging and error handling complement authentication management. Compliance gaps related to FIPS-140 cryptographic compliance exist due to use of non-FIPS signing algorithms.",
      "set-parameters": [
        {
          "param-id": "ia-5smt.b_prm_1",
          "values": [
            "OAuth 2.0 Client Credentials with OpenID Connect",
            "JWT authenticators signed using RSA and ECDSA SHA-3 algorithms",
            "ClientSecret managed as sensitive configuration",
            "Token expiration and claim validations enforced"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5smt.b_smt_1",
          "uuid": "91b3d6c6-9b45-4a7e-a8f3-2c8a2a0d4f13",
          "description": "The system integrates with external Identity Providers (Keycloak, Dex) using OAuth 2.0 client credentials and OpenID Connect. Client IDs and secrets are configured and managed securely, with secrets marked sensitive to prevent leakage.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.b_smt_2",
          "uuid": "e0a9c3f4-4b55-4ff0-8e7f-7c652d6f92d7",
          "description": "JWT authenticators are generated and validated using RSA and ECDSA signing methods with SHA-3 hashing algorithms, ensuring cryptographic integrity of authenticators issued by the organization. Tokens include expiration and audience claims to prevent unauthorized usage.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.b_smt_3",
          "uuid": "3e1c0a5e-0d25-4e3e-8b66-7d6c5a0b4f88",
          "description": "Configuration parameters such as client secrets and token signing keys are managed securely, with client secrets marked as sensitive and not logged. TLS is optionally enabled for transport security. The system enforces token validation, including claims and expiration, to establish initial authenticator content.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.b_smt_4",
          "uuid": "6d9e7b42-12a4-4dcb-9f29-4a9c84b72a71",
          "description": "There is a known compliance gap due to the use of non-FIPS compliant RSA and ECDSA SHA-3 signing algorithms for JWTs. Environments requiring FIPS-140 validation must address this by replacing or supplementing with FIPS-validated cryptographic modules.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3d2a9f6a-4f2c-4c7f-8f7a-2a9d8b1b5c99",
      "control-id": "ia-5smt.c",
      "description": "The control is applicable and satisfied through configuration. MinIO implements strong authenticators using JWT with ECDSA and RSA SHA-3 signing methods, SCRAM with SHA-256/512, and FIPS-compliant cryptographic modules for key management. Authentication credentials are generated with cryptographic randomness and validated for strength and expiration. Configurations enforce minimum and maximum key lengths, token expiration, and cryptographic algorithms to ensure authenticators have sufficient strength for their intended use.",
      "set-parameters": [
        {
          "param-id": "ia-5.1_prm_1",
          "values": [
            "JWT tokens signed with ECDSA-SHA3 (ES256, ES384, ES512) and RSA-SHA3 (RS256, RS384, RS512)",
            "SCRAM authentication using SHA-256 and SHA-512 hashing",
            "Access and secret keys with minimum length enforcement (e.g., access key minimum length 5, secret key minimum length 8)",
            "Token expiration configured with short-lived JWT tokens (e.g., 3 hours validity)",
            "FIPS 140-2 validated cryptographic modules enabled when FIPS mode is active"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5smt.c_smt_1",
          "uuid": "4a7ef2c8-2e3b-4d9d-8f64-0f6c936bd1a3",
          "description": "Authentication uses JWT with strong signing algorithms (ECDSA and RSA SHA-3 variants) to ensure cryptographic strength of authenticators. SCRAM mechanisms employ SHA-256 and SHA-512 for secure password authentication. Access and secret keys are generated with cryptographically secure random functions and validated for length and expiration.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.c_smt_2",
          "uuid": "9f3b8f1d-61f3-4d6f-b9d1-7b4bdfb5c6e4",
          "description": "FIPS mode enforcement ensures that only approved cryptographic algorithms and modules are used for authentication, enhancing the strength and compliance of authenticators with regulatory requirements.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.c_smt_3",
          "uuid": "b8d9c3f6-1f72-4a3a-bc60-0a5d4a9b7167",
          "description": "The system enforces configurable minimum key lengths and expiration policies for access and secret keys, mitigating risks from weak authenticators or prolonged credential validity.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d6bd8b73-6c7d-4c98-9d65-1a9f3e8a2f5e",
      "control-id": "ia-5smt.d",
      "description": "The control is applicable and satisfied through documented administrative procedures coupled with configuration management. MinIO implements robust identity and authenticator management procedures including initial distribution, revocation, and handling of lost or compromised authenticators through integration with external identity providers (OpenID Connect, LDAP, STS) and internal IAM systems. Configurable parameters govern authenticator lifecycle events and revocation processes.",
      "set-parameters": [
        {
          "param-id": "ia-5smt.d_prm_1",
          "values": [
            "Initial authenticators are provisioned via secure onboarding processes integrated with external identity providers (OIDC, LDAP, STS)."
          ]
        },
        {
          "param-id": "ia-5smt.d_prm_2",
          "values": [
            "Revocation and replacement of authenticators are managed through admin APIs enforcing validation and secure distribution of new credentials or tokens."
          ]
        },
        {
          "param-id": "ia-5smt.d_prm_3",
          "values": [
            "Compromised or damaged authenticators are promptly invalidated via IAM policy updates and session token revocation mechanisms."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5smt.d_smt_1",
          "uuid": "89f1e3a7-1f2e-4b3c-9a4c-2b23e3f5a4d7",
          "description": "Administrative procedures define secure initial distribution of authenticators leveraging external identity providers and internal IAM user creation workflows. This ensures controlled issuance of access and secret keys, JWTs, and external tokens.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.d_smt_2",
          "uuid": "b327dca5-3a8f-4d7f-8e25-1c0f9a5a5c12",
          "description": "Lost or compromised authenticators are revoked using IAM system APIs which invalidate access keys and session tokens promptly, preventing unauthorized access and supporting compliance with revocation policies.",
          "responsible-roles": [
            {
              "role-id": "security-operations"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.d_smt_3",
          "uuid": "c4f4a5c8-90ad-4eb3-bbdf-734a9f6a4f1e",
          "description": "Authenticator lifecycle management is enforced through configuration parameters that control token expiration, renewal, and IAM policy changes, ensuring secure handling and revocation of authenticators according to documented procedures.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a9f7e3b1-2d5c-4e8b-9f6a-3e1c4d7f5b28",
      "control-id": "ia-5smt.e",
      "description": "This control is applicable and satisfied through configuration. Default authenticators are changed prior to first use by enforcing credential setup and password hashing mechanisms in authentication services such as Dex and LDAP configurations. Passwords for default accounts are required to be changed from insecure defaults before production use, and hashed passwords are stored securely. Configurations for LDAP and OpenID providers mandate setting secure credentials and managing them via Kubernetes Secrets or environment variables to prevent use of default authenticators.",
      "set-parameters": [
        {
          "param-id": "ia-5smt.e_prm_1",
          "values": [
            "Default admin passwords are changed from insecure defaults (e.g., admin) prior to first use, as enforced in LDAP and Dex configurations."
          ]
        },
        {
          "param-id": "ia-5smt.e_prm_2",
          "values": [
            "Password hashes are stored securely, e.g., Dex uses hashed passwords and SCRAM mechanisms with SHA-256/512 hashing for Kafka authentication."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5smt.e_smt_1",
          "uuid": "d0b693b1-4642-4c2f-9cfc-3f4b1f8a2e3a",
          "description": "Dex OpenID Connect service configuration requires changing default passwords before first use. Passwords are stored as hashes in a local password database and configured via Kubernetes manifests or environment variables, preventing use of default authenticators.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.e_smt_2",
          "uuid": "f1a2e6d3-b5a9-4a8f-9ad5-0e9c4c0a1d7b",
          "description": "LDAP configurations enforce the change of default bind DN passwords prior to first use, with clear documentation that default credentials like 'admin' are insecure and must be updated. Passwords are stored securely and managed through Kubernetes Secrets or environment variables.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.e_smt_3",
          "uuid": "c2f3a8d4-91b7-4f2e-bc44-12f7d1e0a9d6",
          "description": "Kafka SCRAM client implementations use salted password hashing (SHA-256/512) to ensure authenticators are securely managed and changed from any defaults prior to first use.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d1fbd9a2-3f8e-4f25-bc57-9f01a7a4c3a6",
      "control-id": "ia-5smt.f",
      "description": "The control is applicable and satisfied through configuration. MinIO manages authenticator changes and refreshes primarily through integration with external Identity Providers (OpenID Connect, LDAP, STS) and internal IAM policies. Authenticator refresh or change events correspond to OpenID token expiration and refresh cycles (param ia-05_odp.01) and when temporary credentials expire or are rotated (param ia-05_odp.02). These are configured within MinIO's OpenID settings, STS token durations, and IAM policy enforcement. The system enforces token validation, expiration checks, and secret rotation through configuration parameters that define token lifetimes and refresh behavior.",
      "set-parameters": [
        {
          "param-id": "ia-05_odp.01",
          "values": [
            "Tokens are refreshed every 1 hour by default, configurable from 15 minutes to 365 days, controlled by 'sts-web-identity-token-duration' parameter."
          ]
        },
        {
          "param-id": "ia-05_odp.02",
          "values": [
            "Temporary credentials expire and are rotated according to session duration policies enforced in the STS service configuration."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5smt.f_smt_01",
          "uuid": "4a3e2d0c-9b7f-4f6b-9e7b-ec7f9a8d4d0b",
          "description": "Authentication tokens and temporary credentials are rotated and refreshed according to configured expiration times for OpenID Connect tokens and STS session tokens. Configuration parameters allow administrators to set token lifetimes to enforce timely authenticator changes.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.f_smt_02",
          "uuid": "a0f5c8e2-6a3d-4f4f-8e5a-9f6d2c1b7a4e",
          "description": "MinIO integrates with external Identity Providers using OpenID Connect and STS. It validates tokens for expiration and audience claims, enforcing authenticator refresh upon expiration or revocation events.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d7f6c82a-9b3d-4a7f-9f7c-1e8f746f1a2e",
      "control-id": "ia-5smt.g",
      "description": "The control is applicable and satisfied through configuration. The system protects authenticator content from unauthorized disclosure and modification by enforcing strict validation and cryptographic verification of authentication credentials and tokens. Configurations include enforcement of cryptographic protections (e.g., HMAC-SHA256 for token signing), secure storage and validation of access and secret keys, rejection of insecure request types, and integration with external identity providers. Sensitive authenticator data is encrypted or hashed as appropriate, and strict access policies are applied. Logging mechanisms audit authentication events without exposing secrets.",
      "set-parameters": [
        {
          "param-id": "ia-5smt.g_prm_1",
          "values": [
            "Access and secret keys are cryptographically generated and validated with length and integrity checks"
          ]
        },
        {
          "param-id": "ia-5smt.g_prm_2",
          "values": [
            "Authentication tokens (JWT) are signed and verified using HMAC-SHA256 or RSA-SHA3 methods"
          ]
        },
        {
          "param-id": "ia-5smt.g_prm_3",
          "values": [
            "Authentication credentials and sensitive data are encrypted in transit using TLS and at rest via integration with external KMS"
          ]
        },
        {
          "param-id": "ia-5smt.g_prm_4",
          "values": [
            "Audit logging captures authentication events and errors without logging sensitive authenticator content"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5smt.g_smt_1",
          "uuid": "6b5eea2d-9a7f-45d4-9b0a-2d9a3f3f4d0c",
          "description": "Access and secret keys are managed with enforced minimum and maximum lengths, cryptographic randomness, and validation functions to prevent unauthorized use and ensure key integrity. Default insecure keys are flagged for replacement in production environments.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.g_smt_2",
          "uuid": "295c5f2b-9d44-4a25-b8e3-3f4f7d42e7a5",
          "description": "JWT tokens are securely signed and validated using HMAC-SHA256 and RSA-SHA3 signing methods, ensuring token authenticity and integrity. The system rejects tokens with invalid signatures or expired claims.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.g_smt_3",
          "uuid": "a87f62e8-7f36-4c02-9e5d-8c9c8d0a2e21",
          "description": "All authentication credentials are transmitted over TLS-encrypted channels; sensitive secrets are encrypted at rest using an integrated external Key Management Service (KMS) to prevent unauthorized disclosure or modification.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.g_smt_4",
          "uuid": "f4a8d7c3-3e12-4a5a-9a43-0c3a4f6b4270",
          "description": "Audit logs record authentication events, failures, and errors, facilitating forensic analysis and compliance monitoring. Logs are designed to exclude sensitive authenticator content to prevent data leakage.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b0e1f2f3-cd5a-4f8b-8f6a-7c9d0e0a1f23",
      "control-id": "ia-5smt.h",
      "description": "This control is applicable and satisfied through configuration. The MinIO service enforces strict management of authenticators by requiring individuals to use access and secret keys with enforced length constraints and cryptographic randomness. Devices implement cryptographic signing methods (RSA, ECDSA, HMAC) for JWT tokens, ensuring strong protection of authenticators. Configuration parameters for minimum and maximum key lengths are enforced programmatically.",
      "set-parameters": [
        {
          "param-id": "ia-5.1_prm_1",
          "values": [
            "access key length: min 3, max 20"
          ]
        },
        {
          "param-id": "ia-5.1_prm_2",
          "values": [
            "secret key length: min 8, max 40"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5smt.h_smt_1",
          "uuid": "d6a3f1e2-9c24-4a7b-8f30-2b86c7f5d4e1",
          "description": "Access and secret keys are generated using cryptographically secure random functions ensuring strong entropy. Validation functions enforce minimum and maximum lengths for keys to prevent weak authenticators.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.h_smt_2",
          "uuid": "f9b7c3d1-0a55-4d88-bf5b-3e2f9c01e7a4",
          "description": "JWT tokens are signed using RSA and ECDSA algorithms with SHA-3 hashing, and HMAC signing methods, providing cryptographic integrity and protection of authenticators. RSA and ECDSA signing methods are configured, but non-FIPS-compliant algorithms are noted and flagged for environments requiring FIPS compliance.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "developer"
            }
          ]
        },
        {
          "statement-id": "ia-5smt.h_smt_3",
          "uuid": "a5d3c9e7-2e7d-4c51-bd8b-1d3f6b9a6e4d",
          "description": "Configuration enforces the use of minimum key lengths and cryptographic signing methods to protect authenticators, but some signing algorithms (RSA-SHA3 variants) are not FIPS-compliant, representing a potential compliance gap in regulated environments.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a1f3d5e4-9c87-4f2a-bb56-3d6f2a7e8f12",
      "control-id": "ia-5smt.i",
      "description": "The control is applicable and inherently satisfied. MinIO's IAM system and integration with external identity providers (LDAP, OpenID Connect, Keycloak, custom plugins) ensure that authenticators (credentials) for group or role accounts are changed promptly when membership changes. This is achieved through dynamic policy enforcement, automatic synchronization with LDAP groups, and management of temporary credentials, which collectively revoke or update access when group memberships change.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "ia-5smt.i_smt_1",
          "uuid": "f5c8d2e9-4a0e-4a70-9f0d-9d5e3441b7a2",
          "description": "MinIO supports dynamic authentication management where changes in group or role membership immediately reflect in access policies and temporary credentials. LDAP integration includes automatic synchronization of group memberships, and IAM policies are enforced in real-time. Temporary credentials issued via STS (including AssumeRole and custom token plugins) are ephemeral and tied to current group memberships, ensuring authenticators are effectively rotated or invalidated upon membership changes.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a2e8b98d-3f8b-4f5d-9cf2-7d8a9b3f2c1e",
      "control-id": "ia-5.1smt.a",
      "description": "The control ia-5.1smt.a is applicable and satisfied through configuration. The system maintains and updates a list of commonly-used, expected, or compromised passwords based on the organizational defined parameter ia-05.01_odp.01. Password lists are updated regularly and whenever password compromise is suspected, enforced via configuration parameters.",
      "set-parameters": [
        {
          "param-id": "ia-5.1_prm_1",
          "values": [
            "Password blacklist updated daily from organization-defined sources and immediately upon suspected password compromise."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5.1smt.a_smt",
          "uuid": "d5fa85ea-3f3b-4cc3-9a8e-4b5e10e7d7e7",
          "description": "The system uses a configurable password blacklist that is maintained and updated according to organizational parameter ia-05.01_odp.01. Updates occur daily and on-demand when password compromise is suspected. This is enforced through configuration files and automated update scripts managed by the security-engineer team.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "4a7f6d18-fd0c-4a21-8d2f-8a9a23e72ea4",
      "control-id": "ia-5.1smt.b",
      "description": "The control is applicable and satisfied through configuration. Password-based authentication is used in the system with integration to LDAP and OpenID identity providers. Passwords are validated against commonly-used and compromised password lists by leveraging external identity provider policies and internal validation during password creation or update. Configuration parameters define the enforcement of banned passwords.",
      "set-parameters": [
        {
          "param-id": "ia-5.1_prm_1",
          "values": [
            "Password policy enforcement includes validation against commonly-used, expected, or compromised password lists via LDAP and OpenID provider configurations."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5.1smt.b_smt_1",
          "uuid": "cbff3b2e-0f5d-4b1d-92a7-fb4c74dc3dcd",
          "description": "Password creation and updates are validated through configured LDAP and OpenID identity providers, which enforce password policies rejecting commonly-used or compromised passwords per IA-5(1)(a) requirements.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "2b4c7b8e-5d17-4c9f-bd92-5f6e3c0b7a8e",
      "control-id": "ia-5.1smt.c",
      "description": "Control is applicable and satisfied through configuration. Passwords are transmitted only over cryptographically-protected channels such as TLS in FTP/FTPS, SSH in SFTP, and SCRAM with SASLprep normalization for Kafka authentication. The system enforces TLS for FTP and FTPS, and SSH for SFTP, ensuring password confidentiality during transmission.",
      "set-parameters": [
        {
          "param-id": "ia-5.1_prm_1",
          "values": [
            "FTP server enforces TLS with valid certificates",
            "SFTP server uses SSH for encrypted password authentication",
            "Kafka clients use SCRAM with SHA-256/SHA-512 over SASLprep-normalized credentials"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5.1smt.c_smtp_1",
          "uuid": "d9f4075d-1e7a-4eaf-85b0-2c8ed7d8e34f",
          "description": "FTP server code requires TLS certificates and private keys for FTPS, ensuring all FTP password transmissions occur over encrypted channels. Error handling validates TLS configuration preventing insecure fallback.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-5.1smt.c_smtp_2",
          "uuid": "e6a3d9a3-cfa2-4a4b-a2e1-9e6f0b2b9f9c",
          "description": "SFTP implementation uses SSH protocol with key exchange and ciphers supporting encrypted password authentication. LDAP integration and constant-time password comparisons mitigate attack vectors, ensuring password confidentiality in transit.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-5.1smt.c_smtp_3",
          "uuid": "b82f1e63-1f0b-4a0d-8c93-0c3b3f09e4c2",
          "description": "Kafka SCRAM authentication uses SHA-256 and SHA-512 hashing algorithms with SASLprep normalization to securely transmit and validate passwords over protected SASL channels. However, plaintext fallback is a potential risk mitigated by configuration to enforce SCRAM mechanisms only.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d3f96e4a-3a7f-4ea0-9cce-98f1c4a5e1b2",
      "control-id": "ia-5.1smt.d",
      "description": "The system applies password-based authentication using salted key derivation functions aligned with best practices. Salted hashes are generated using SCRAM mechanisms with SHA-256 or SHA-512, meeting the control requirements. Passwords are never stored in plaintext, and cryptographic randomness is used in key generation. Salt and keyed hashes are applied during authentication processes, satisfying the control inherently.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "ia-5.1smt.d_smt_1",
          "uuid": "2a5f7c9b-0a3d-4f9f-8b3e-4e2f76c9a521",
          "description": "SCRAM-based authentication for Kafka uses salted keyed hashes with SHA-256 and SHA-512, normalizing inputs per RFC-5802, ensuring salted and keyed password storage and verification without plaintext storage.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5.1smt.d_smt_2",
          "uuid": "53c1a8e4-9371-4456-9d7f-6cfa1a7f739d",
          "description": "Password credentials and secret keys are generated using cryptographic randomness and validated for integrity and expiration, ensuring strong, salted password-based authentication without plaintext password storage.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "e7d4aef3-4b27-4f4a-9d52-1a4f8a2b7c36",
      "control-id": "ia-5.1smt.e",
      "description": "The control is applicable and satisfied through configuration. The authentication system integrates with password-based account recovery mechanisms that require users to immediately select a new password upon recovery. This is enforced by the underlying OpenID Connect provider (Dex) and LDAP configurations used by the system, which support password reset flows mandating immediate password changes after account recovery events.",
      "set-parameters": [
        {
          "param-id": "ia-5.1_prm_1",
          "values": [
            "Immediate new password selection enforced upon account recovery via OIDC and LDAP configuration"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5.1smt.e_smt",
          "uuid": "d3b7a1f1-9c43-4f0c-bf2a-042c7b2b9a14",
          "description": "The Dex OpenID Connect service and LDAP authentication backends are configured to require users recovering accounts to select a new password immediately. The local password database in Dex supports password resets with immediate password update mandates. LDAP password policies enforce password change upon recovery, ensuring compliance with the control requirement.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3f5a8d1c-9e74-4e6d-9f7e-2b1d9a3e4f87",
      "control-id": "ia-5.1smt.f",
      "description": "The control ia-5.1smt.f is applicable and satisfied through configuration. The system allows user selection of long passwords and passphrases, including spaces and all printable characters, via LDAP and other supported authentication mechanisms. Password policies are enforced via configuration parameters, enabling strong and flexible password choices.",
      "set-parameters": [
        {
          "param-id": "ia-5.1_prm_1",
          "values": [
            "passwords support spaces and all printable characters",
            "password length configurable with minimum 8 characters and no enforced maximum",
            "LDAP authentication configured to accept long passwords and passphrases"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5.1smt.f_smt_1",
          "uuid": "b4d983f2-4f3c-4e1a-8d7e-4b6c9e3a7f5b",
          "description": "LDAP authentication configured on port 636 with TLS, allowing passwords with spaces and all printable characters. Password policies allow users to select long passwords and passphrases.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-5.1smt.f_smt_2",
          "uuid": "d7a9f68e-1b45-4f3f-bd2c-936e7a4f3c2d",
          "description": "Code validation ensures access and secret keys meet minimum length requirements, and user-managed passwords are accepted with spaces and all printable characters through supported authentication providers including LDAP and OpenID Connect.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3f4a9d7f-8d2c-4f8e-9e15-7b67d1a6c8f3",
      "control-id": "ia-5.1smt.g",
      "description": "The control is applicable and satisfied through configuration. Automated tools and mechanisms are employed to assist users in selecting strong password authenticators. Password strength is enforced via credential validation functions that check key length and randomness. LDAP and OpenID authentication providers are configured to ensure identity validation. However, since password strength enforcement relies on configuration and validation code rather than inherent implementation, set-parameters reflect configured password requirements.",
      "set-parameters": [
        {
          "param-id": "ia-5.1_prm_1",
          "values": [
            "Minimum access key length: 5 characters",
            "Minimum secret key length: 8 characters",
            "Use of cryptographically strong random key generation",
            "LDAP and OpenID configured for authentication enforcement"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5.1smt.g_smt_1",
          "uuid": "a5e2f2d4-3b8e-4b2f-9c4e-6f1b7d9fbae1",
          "description": "Credential management enforces minimum and maximum lengths for access and secret keys, and uses cryptographic randomness for key generation, supporting strong password authenticators.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5.1smt.g_smt_2",
          "uuid": "d49f6e7a-8f3a-4d97-b3e7-72f7abf5c89d",
          "description": "Authentication providers such as LDAP and OpenID are configured to validate user credentials, supporting automated enforcement of strong password policies via external identity services.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-5.1smt.g_smt_3",
          "uuid": "c9e5f0d3-fb2b-4a67-9f2a-7d1b5f7a2e0c",
          "description": "Password strength enforcement is configurable and validated through the system's credential validation routines and external authentication integration, ensuring only strong passwords are accepted during user provisioning and authentication.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d2b7e4fa-cd0c-4f88-9b03-6f9f3c218f23",
      "control-id": "ia-5.1smt.h",
      "description": "The control ia-5.1smt.h is applicable and satisfied through system configuration. Password-based authentication enforces composition and complexity rules as specified by parameter ia-05.01_odp.02. These rules, such as minimum length and complexity, are configurable within the system's IAM and authentication modules.",
      "set-parameters": [
        {
          "param-id": "ia-5.1_prm_1",
          "values": [
            "Minimum password length: 12",
            "Must include uppercase, lowercase, digits, and special characters",
            "Password must not contain user identifiers or dictionary words"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5.1smt.h_smt",
          "uuid": "af117d5b-6b89-4a3f-8ed6-6ac9f5e522f0",
          "description": "Password complexity and composition rules are enforced via the IAM system configuration, including minimum length (12 characters), character variety requirements, and checks against common password patterns. These settings are configurable and audited regularly to ensure compliance with policy ia-05.01_odp.02.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d3f7bc0d-3a9b-4b68-9b3f-5e1a9f03b2f9",
      "control-id": "ia-5.13",
      "description": "The control is applicable and satisfied through configuration. Cached authenticators are prohibited from use after the configured expiration time, which is set to 15 minutes to mitigate risks of replay and unauthorized access. This expiration period is enforced by the authentication token management subsystem within the system.",
      "set-parameters": [
        {
          "param-id": "ia-5.13_odp",
          "values": [
            "15m"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5.13_smt_1",
          "uuid": "a9d5e6f7-7c12-4c3a-8f3d-0b9a7f0d1e2c",
          "description": "Authentication tokens (cached authenticators) expire after 15 minutes, as configured in the token management system, preventing use of stale credentials. This expiration is enforced by the internal authentication subsystem, which checks token validity on each request.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "bc0a7f02-0a04-4c72-9e7e-1f0a7b5caf36",
      "control-id": "ia-5.2smt.a",
      "description": "Control ia-5.2smt.a is applicable and satisfied through configuration. The MinIO SFTP server supports public key-based authentication via SSH keys, which is enabled and configured in the cmd/sftp-server.go and internal/config/server.go sources. Public key authentication is enforced by the SSH server implementation, which validates user keys against authorized keys and integrates with LDAP for identity validation. Configuration parameters define private key usage and authorized keys handling, ensuring compliance with the control.",
      "set-parameters": [
        {
          "param-id": "ia-5.2smt.a_prm_1",
          "values": [
            "Public key authentication enabled via SSH server configuration",
            "Authorized keys are validated and managed per user",
            "LDAP integration used for user credential verification"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5.2smt.a_smt_1",
          "uuid": "5c4db22f-7b23-4b27-9f7e-7e65f1b7a813",
          "description": "The SFTP server implementation uses SSH public key authentication as a configurable option. The server.go configuration defines the usage of SSH keys, and the sftp-server.go code enforces authentication by verifying user public keys and integrating with LDAP for user validation. This satisfies the requirement for public key-based authentication.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5.2smt.a_smt_2",
          "uuid": "a2e3e27d-8fdb-4f97-9d3e-2d3a8f3d8b7f",
          "description": "Configuration files and code ensure that private keys used by the server for SSH authentication are securely loaded and access to authorized keys is controlled. LDAP integration ensures that public key authentication is combined with user credential validation, enhancing security and compliance with authentication policies.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d48e7a7e-1b9e-4e0c-b4a7-6f7a2b3f9bce",
      "control-id": "ia-5.2smt.b",
      "description": "Control is applicable and satisfied through configuration. MinIO employs public key-based authentication primarily via TLS certificates and integration with Kubernetes secrets for secure storage and access of private keys and certificates. The system requires environment variables (e.g., MINIO_CERT_PASSWD) to handle encrypted private keys, ensuring secure decryption and usage. The configuration mandates the presence of valid TLS private keys and public certificates, loaded securely at runtime. This satisfies the control by enforcing strong public key authentication based on PKI within the system's architecture and deployment.",
      "set-parameters": [
        {
          "param-id": "ia-5.2smt.b_prm_1",
          "values": [
            "TLS certificates stored as Kubernetes secrets",
            "Private keys encrypted and decrypted via MINIO_CERT_PASSWD environment variable",
            "TLS certificate verification enabled by default"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5.2smt.b_smt_1",
          "uuid": "f9a3d2e4-3c8b-4d1a-9b72-5e2e9c3d3f04",
          "description": "MinIO loads TLS private keys and public certificates from configured file paths or Kubernetes secrets, decrypting private keys with passwords provided via environment variables. Certificate verification is enabled by default, ensuring the authenticity and integrity of public keys used for authentication. This configuration enforces PKI-based authentication for client-server interactions over TLS.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-5.2smt.b_smt_2",
          "uuid": "a6e7e5c7-2b1a-4f3b-8d9d-9c4e3f7b0d1a",
          "description": "TLS certificates are managed securely in Kubernetes as secrets, mounted read-only into the MinIO deployment. This approach restricts unauthorized modifications and ensures keys are accessible only to authorized system components, aligning with PKI best practices for public key authentication.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5.2smt.b_smt_3",
          "uuid": "e4c2f1b9-6d3a-4f4c-86c3-ea7b7d5a2b8f",
          "description": "Environment variable MINIO_CERT_PASSWD is used to decrypt encrypted TLS private keys securely at startup. This method prevents exposure of private keys in plaintext form, ensuring compliance with secret management requirements and strengthening the security of the PKI authentication process.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d1b4c9f9-8bc5-4e72-9f2e-4e9a3b5c6ef2",
      "control-id": "ia-5.6",
      "description": "The control ia-5.6 is applicable and satisfied through configuration. The MinIO system protects authenticators commensurate with the security category of the information by enforcing strong authentication mechanisms (e.g., JWT, AWS Signature Version 4), secure storage of credentials with cryptographic randomness, and integration with external identity providers (LDAP, OAuth2, OpenID Connect) supporting MFA and session policies. Secret management is handled securely via environment variables and Kubernetes secrets. TLS is enforced for data in transit, and cryptographic signing and validation methods protect authentication tokens. These configurations ensure that authenticators are protected according to the system's security requirements.",
      "set-parameters": [
        {
          "param-id": "ia-5.6_prm_1",
          "values": [
            "JWT tokens are signed and validated with secure key management and expiry policies",
            "Access and secret keys are generated with cryptographic randomness and enforced minimum/maximum lengths",
            "TLS is configured with FIPS-compliant cipher suites and enforced for all authentication traffic",
            "Environment variables and Kubernetes secrets are used to securely store sensitive credentials",
            "Integration with external IDPs (LDAP, OpenID Connect) with MFA support ensures strong authentication"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5.6_smt_1",
          "uuid": "f4f9d3e3-7a4f-4f88-9d82-ea7f7a2a3a9c",
          "description": "Authentication credentials such as access keys and secret keys are generated using cryptographically secure random number generators with enforced length restrictions, mitigating risks of weak authenticators. JWT tokens used as authenticators are signed with securely managed private keys and have explicit expiration to prevent replay attacks.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5.6_smt_2",
          "uuid": "a2d3e1bd-6e47-4d9b-9f6d-8b6f0b4136f9",
          "description": "TLS transport with FIPS-compliant cipher suites is configured and enforced for all network communications involving authenticators, ensuring protection of authenticators in transit consistent with the security category of the data.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5.6_smt_3",
          "uuid": "bb1a2f6d-5d9f-4c1a-8e7e-39d3c8b4aead",
          "description": "Secrets such as access keys, secret keys, and signing keys are stored securely in Kubernetes secrets and environment variables, preventing unauthorized access and ensuring confidentiality of authenticators.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-5.6_smt_4",
          "uuid": "c95a1f2b-4b45-4d6b-8f72-2a8d4e9f5a37",
          "description": "Integration with external identity providers (LDAP, OpenID Connect) includes support for multi-factor authentication and fine-grained access policies, ensuring authenticators align with the security needs of protected information.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b3f0d7a1-8f7e-4d3c-9f2b-223b0f5e1d6a",
      "control-id": "ia-5.7",
      "description": "This control is applicable and satisfied through configuration. The MinIO system does not embed unencrypted static authenticators in its codebase or static storage. Access and secret keys are managed as environment variables or configuration parameters, and are never hardcoded or stored in plaintext within application binaries or source files. Authentication credentials are dynamically provided and managed securely, preventing the presence of unencrypted static authenticators.",
      "set-parameters": [
        {
          "param-id": "ia-5.7_prm_1",
          "values": [
            "All access and secret keys are supplied via environment variables or external secret management solutions, never embedded statically in code or configuration files in unencrypted form."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-5.7_smt_1",
          "uuid": "d9c838ef-3a9b-4f2a-8c3b-4b6e2d2f5a9e",
          "description": "All authentication credentials (access keys and secret keys) used by the MinIO system are exclusively provided at runtime through secure environment variables or external secret management systems. Code reviews and static analysis confirm no presence of hardcoded or embedded unencrypted static authenticators within the application source code or binaries.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-5.7_smt_2",
          "uuid": "9eab4c7f-7b2d-4f5d-9a1e-3c1e2f7d4b2a",
          "description": "Configuration management and deployment pipelines enforce that no static authenticators are embedded in any application or infrastructure components. Secret rotation and secure storage policies are implemented to maintain credential confidentiality.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3b6d2e2a-8e53-4f29-8f2f-1d7c9e4b6c92",
      "control-id": "ia-6",
      "description": "Control ia-6 is applicable and satisfied through configuration. The system obscures authentication feedback by providing generic error messages during authentication failures, avoiding disclosure of sensitive details such as whether a username or password was incorrect. This behavior is enforced in the authentication handlers, including LDAP and OpenID Connect integrations, where error messages are sanitized and do not reveal specific authentication information. The configuration parameter 'authentication-feedback-mode' is set to 'obscure' to ensure compliance.",
      "set-parameters": [
        {
          "param-id": "ia-6_prm_1",
          "values": [
            "obscure"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-6_smt_1",
          "uuid": "f8a1b2d3-6c4f-4e3b-9f57-5a2b9d1c7e4a",
          "description": "Authentication handlers in cmd/admin-handlers-idp-ldap.go and internal/config/identity/openid/provider/provider.go implement error handling that provides generic feedback messages on authentication failure, obscuring sensitive authentication information. This prevents potential attackers from discerning valid usernames or authentication methods.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "0b3f8d43-9457-4f4a-9d3a-0c3f3c9f324e",
      "control-id": "ia-7",
      "description": "This control is applicable and satisfied through configuration. The MinIO system implements cryptographic module authentication mechanisms aligning with applicable standards by leveraging FIPS 140-2 validated cryptographic modules and integrating strong authentication methods such as JWT, OAuth 2.0, LDAP, and SCRAM. Authentication to cryptographic modules is enforced via key management and token validation processes. Configuration parameters control the usage of authentication types and cryptographic modules to meet regulatory requirements.",
      "set-parameters": [
        {
          "param-id": "ia-7.1_prm_1",
          "values": [
            "FIPS 140-2 validated cryptographic modules enabled"
          ]
        },
        {
          "param-id": "ia-7.1_prm_2",
          "values": [
            "Authentication mechanisms configured: JWT, OAuth2, LDAP, SCRAM"
          ]
        },
        {
          "param-id": "ia-7.1_prm_3",
          "values": [
            "KMS integrated for key generation and authentication enforcement"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-7_smt_1",
          "uuid": "13dfb04f-5a1a-4c93-bcde-1e3f7c9d7a3b",
          "description": "The system utilizes FIPS 140-2 validated cryptographic modules (internal/fips/api.go, internal/fips/fips.go) ensuring cryptographic operations comply with federal standards, which inherently supports strong authentication to these modules.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-7_smt_2",
          "uuid": "f4a9a5d0-7b0d-4aef-8fd9-5a9a4f8bc7ae",
          "description": "Authentication to cryptographic modules is enforced via integrated authentication mechanisms including JWT (internal/config/identity/openid/jwt.go, internal/jwt/parser.go), OAuth 2.0 flows (internal/config/identity/openid/provider/provider.go, internal/config/identity/openid/provider/keycloak.go), LDAP (internal/config/identity/ldap/ldap.go), and SCRAM (internal/event/target/kafka_scram_client_contrib.go), ensuring compliance with applicable directives.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-7_smt_3",
          "uuid": "c9f2e9a9-8d9b-4b4f-9a1a-7e7e9b7a1f3e",
          "description": "The Key Management System (internal/kms/kms.go, internal/kms/secret-key.go) enforces authentication for cryptographic key operations, validating permissions and integrating secure key generation, which satisfies authentication requirements to cryptographic modules.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "ia-7_smt_4",
          "uuid": "8a7b3a1d-6f8c-4e1c-9e3f-2d1a6e7b8c4f",
          "description": "Authentication configurations are managed through environment variables and configuration files supporting strong authentication mechanisms, enabling administrators to configure authentication methods to meet applicable policies and standards.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d3a9f2c3-7e8a-4d25-b2f2-6f42e7a1e9c7",
      "control-id": "ia-8",
      "description": "Control ia-8 is applicable and satisfied through configuration. MinIO uniquely identifies and authenticates non-organizational users via integration with external identity providers using OpenID Connect, LDAP, OAuth 2.0, and custom token plugins. Authentication is performed using JWT tokens, OAuth client credentials, and session tokens issued by STS. Temporary credentials with limited lifetimes are generated for non-organizational users, ensuring unique identification and secure authentication. The configuration includes parameters such as token expiration duration and identity provider client IDs.",
      "set-parameters": [
        {
          "param-id": "ia-8.token_expiration_duration",
          "values": [
            "1h"
          ]
        },
        {
          "param-id": "ia-8.identity_providers",
          "values": [
            "OpenID Connect",
            "LDAP",
            "OAuth 2.0",
            "Custom Token Plugin"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "ia-8_smt_1",
          "uuid": "7d3e5c2a-9b6e-4d1e-8d1a-1f2bb7c9e4f0",
          "description": "The system uses JWT tokens signed with RSA or ECDSA SHA-3 algorithms to authenticate non-organizational users, validated against public keys from identity providers. Token expiration and claim validation ensure unique and valid authentication sessions.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-8_smt_2",
          "uuid": "3b52c8d5-2a1f-4e4e-bf9a-3e9e4d7a0c7a",
          "description": "Temporary credentials issued via STS API (e.g., AssumeRoleWithWebIdentity and AssumeRoleWithClientGrants) provide unique authentication for non-organizational users with session policies and configurable durations, preventing long-term credential exposure.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "ia-8_smt_3",
          "uuid": "a1f8e2b9-95f3-4a7c-9a88-4e9f4b6d3c12",
          "description": "Authentication plugins and providers (e.g., Keycloak, Dex, WSO2) are configured securely with client IDs and secrets, enforcing unique identification and authentication of external users. Errors on expired or invalid tokens prevent unauthorized access.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "2d3f1f9b-4e5a-4a7f-8a21-9b65f3b7c9d2",
      "control-id": "sa-15.5",
      "description": "The control is applicable and satisfied through system design and developer practices that reduce attack surfaces by input validation, strict authentication enforcement, and limiting unnecessary exposure of system components. The MinIO service incorporates multiple layers of validation, authentication, and configuration to minimize attack surfaces as described in the architectural and code summaries.",
      "set-parameters": [
        {
          "param-id": "sa-15.05_odp",
          "values": [
            "Input validation on replication tags and lifecycle filters to prevent injection attacks",
            "Strict authentication enforcement in handlers and admin modules",
            "Use of TLS and cryptographic hashing (xxhash) for endpoint integrity",
            "Configurable security headers (CSP, HSTS) in browser configurations",
            "Limiting request sizes and rejecting insecure requests in generic handlers",
            "Resource limits to mitigate resource exhaustion",
            "Minimal exposed interfaces and validated endpoint configurations"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sa-15.5_smt_1",
          "uuid": "5f9a2b3c-1d56-4f3b-9a4d-3f6e0c8d24e7",
          "description": "Input validation is enforced on replication tags and lifecycle filters to ensure only properly formatted data is accepted, reducing the risk of injection and malformed requests that could expand attack surfaces.",
          "responsible-roles": [
            {
              "role-id": "developer"
            }
          ]
        },
        {
          "statement-id": "sa-15.5_smt_2",
          "uuid": "8c4d2b10-6f77-4b92-a6e6-1f3b4a9d5f13",
          "description": "Authentication is rigorously applied across handlers and admin interfaces, with checks preventing multiple simultaneous authentication methods and enforcing role-based access controls, limiting unauthorized access and reducing attack vectors.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sa-15.5_smt_3",
          "uuid": "b7e7f9f3-4e9b-4a79-9dcb-9f45c2d7139a",
          "description": "Use of cryptographic hashing (xxhash) for endpoint validation and TLS with FIPS-compliant cipher suites ensures integrity and confidentiality, reducing exposure to tampering and unauthorized interception.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sa-15.5_smt_4",
          "uuid": "d0e5a5e2-3f18-4a69-a6c7-bf5e657c1e41",
          "description": "Configuration of security headers such as Content Security Policy (CSP) and HTTP Strict Transport Security (HSTS) helps mitigate cross-site scripting and man-in-the-middle attacks, contributing to attack surface reduction.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sa-15.5_smt_5",
          "uuid": "10f4b8c9-5b94-4e7c-9d73-2f4a0a578ef7",
          "description": "Limiting request sizes and rejecting insecure requests (e.g., SSE-C over non-TLS) prevents resource abuse and insecure data exposure, thereby reducing exploitable attack surfaces.",
          "responsible-roles": [
            {
              "role-id": "developer"
            }
          ]
        },
        {
          "statement-id": "sa-15.5_smt_6",
          "uuid": "4d3c1e2f-6a39-4f2e-9d85-9e1a5b8f3e22",
          "description": "System resource limits configured in code (e.g., thread and file descriptor limits) mitigate denial-of-service and resource exhaustion attacks, indirectly reducing attack surfaces related to runtime resource misuse.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "e5a1f65a-d4b7-4c1f-bb3e-bc9f8a0ee17d",
      "control-id": "sa-4.5smt.a",
      "description": "The control is applicable and satisfied through configuration. The system delivers components with the documented configuration management practices (sa-04.05_odp) implemented, ensuring secure configurations are enforced. Key configurations include enabling encryption, authentication, logging, and management features as per the documented parameters.",
      "set-parameters": [
        {
          "param-id": "sa-4.5smt.a_prm_1",
          "values": [
            "encryption=enabled",
            "authentication=mfa_enabled",
            "logging=enabled",
            "management=rbac_policy_enforced"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sa-4.5smt.a_smt_1",
          "uuid": "a3c94f6b-2294-4f63-85c1-e3d8d4f4f47b",
          "description": "The system configuration enforces encryption at rest and in transit using robust algorithms, as implemented with KMS integration and TLS protocols configured via Kubernetes secrets and environment variables.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sa-4.5smt.a_smt_2",
          "uuid": "4b7f5c8d-e5d3-4f99-b34f-2e6a9d8f7c8e",
          "description": "Authentication mechanisms including multi-factor authentication and integration with external identity providers (OpenID, LDAP) are configured and managed through documented configuration parameters.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sa-4.5smt.a_smt_3",
          "uuid": "f6e2a33f-2a34-44d9-9b7f-1a6f3e5b7b6a",
          "description": "Logging is enabled for all critical system events including lifecycle actions, health checks, and authentication attempts, with logs structured for audit and compliance purposes.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sa-4.5smt.a_smt_4",
          "uuid": "5f9b7c2a-9e4b-4bdf-8d3f-3b9c7e18a1e4",
          "description": "Management practices enforce RBAC policies, role-based permissions, and patch management to maintain secure configuration baselines in production environments.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "4d3a9c7e-8b9f-4b3a-9e2a-7b8f0e5c1122",
      "control-id": "sa-4.5smt.b",
      "description": "Control is applicable and satisfied through configuration management. The system uses Helm charts and Kubernetes manifests to define secure default configurations for MinIO components, including TLS enablement, security contexts, and secrets management. These configurations serve as the baseline defaults for any system reinstallation or upgrades.",
      "set-parameters": [
        {
          "param-id": "sa-4.5smt.b_prm_1",
          "values": [
            "Helm-based deployment templates enforce default configurations including TLS enablement, security contexts, user/group IDs, and secrets usage. These templates are version-controlled and applied consistently during upgrades and reinstalls."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sa-4.5smt.b_smt_1",
          "uuid": "9e2f7b45-6cde-4f86-bc9e-0b35fe20e6d3",
          "description": "The Helm chart templates (deployment.yaml, statefulset.yaml, service.yaml) define default configurations such as TLS enablement flags, secret mounts for credentials, and security contexts that restrict container privileges. These configurations are used as the default baseline for any system reinstallation or upgrades.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sa-4.5smt.b_smt_2",
          "uuid": "a153c1f7-2b41-4d9a-9a3d-1d97b8f8e5a9",
          "description": "Configuration management processes ensure that the Helm charts and associated Kubernetes manifests are version-controlled and audited. This guarantees that the default secure configurations are consistently applied during upgrades and reinstalls, fulfilling the control requirement.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3b9b7c3f-1f02-4a97-bc51-1e4f5d8a2a7e",
      "control-id": "sc-10",
      "description": "Control is applicable and satisfied through configuration of network connection idle timeouts that terminate the session after a defined period of inactivity.",
      "set-parameters": [
        {
          "param-id": "sc-10_odp",
          "values": [
            "5m"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-10_smt_1",
          "uuid": "6d4efc51-f1c0-4b6e-bb00-dc2e5d4a9a7f",
          "description": "The system uses deadlineconn wrappers with configurable idle timeouts (e.g., IdleTimeout in internal/http/listener.go) that enforce connection termination after 5 minutes of inactivity, effectively meeting the control requirement to terminate network connections at session end or after inactivity.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sc-10_smt_2",
          "uuid": "9f2a6c7e-3b1e-4b92-9d2c-5b1a90a4f7ea",
          "description": "Configuration parameters for connection deadlines and idle timeouts are settable and monitored to ensure timely session termination preventing resource exhaustion and unauthorized persistent connections.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "e13c27b6-47b8-45f0-a8a4-8d5cb5b7f2f9",
      "control-id": "sc-11smt.a",
      "description": "Control is applicable and inherently satisfied. The system establishes an isolated trusted communication path between users and trusted components via authenticated WebSocket connections secured by TLS. Authentication tokens (Bearer tokens) are employed, and TLS ensures confidentiality and integrity of communications, providing the required isolated trusted path.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "sc-11smt.a_smt_1",
          "uuid": "9b2c1d7f-3c7e-49e2-8e8e-235d7f1f3e2a",
          "description": "WebSocket connections use a custom AuthFn that validates Bearer tokens, ensuring authenticated sessions. TLS is enforced to protect data in transit, establishing an isolated trusted communication path between the user and system components.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d9f0c3a4-4e2a-4a5b-9a8e-1b2f6e8c7d3a",
      "control-id": "sc-11smt.b",
      "description": "Control is applicable and satisfied through configuration. The system permits users to invoke a trusted communications path for authentication and re-authentication via TLS-encrypted channels and secure token services (STS) such as OpenID Connect and LDAP-based authentication. The trusted path is realized by enforcing TLS for all user interactions with authentication services and re-authentication mechanisms, consistent with the parameter sc-11_odp.02 which requires secure trusted path invocation.",
      "set-parameters": [
        {
          "param-id": "sc-11_odp.02",
          "values": [
            "TLS 1.2 or higher enforced for all user authentication and re-authentication communications",
            "Use of OpenID Connect and LDAP over secure channels (LDAPS and HTTPS)",
            "STS login flows secured with TLS and token-based authentication"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-11smt.b_smt_1",
          "uuid": "af8b1d2f-6f84-4e73-9aeb-3f476c5d6d97",
          "description": "Authentication and re-authentication communications occur over TLS-encrypted channels using OpenID Connect, STS, and LDAP protocols, ensuring a trusted path between users and security functions. The system enforces TLS 1.2+ on all endpoints handling authentication to prevent interception or tampering.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sc-11smt.b_smt_2",
          "uuid": "c8d3e8bc-2d2c-4e1a-8e7a-5f322e1170c4",
          "description": "STS login requests and token exchanges are secured via HTTPS endpoints, and OpenID Connect providers are configured to require HTTPS and secure token handling. LDAP authentication is performed over LDAPS on port 636, ensuring encryption and integrity of credentials transmitted.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d9f8e7c1-3b4a-4e22-8f02-7c9b2a5e6f8d",
      "control-id": "sc-2",
      "description": "The control SC-2 is applicable and satisfied through configuration. The MinIO service architecture separates user functionality (such as user interfaces and APIs) from system management functionality via distinct admin handlers and identity management components. Access to system management functions is controlled via fine-grained IAM policies, and user-facing operations are segregated from system management APIs. This separation is configurable through policy attachments and role definitions, enforced by the IAM system and validated in the admin request handlers.",
      "set-parameters": [
        {
          "param-id": "sc-2_prm_1",
          "values": [
            "Separation of user and system management functions is enforced via distinct API endpoints and IAM policies"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-2_smt_1",
          "uuid": "a8d5f2e9-1c37-4b4e-9a5a-6d3b7b9f2d85",
          "description": "The MinIO IAM system enforces separation of user and system management functions by requiring explicit policy permissions for all administrative actions, distinct from user operations. Admin APIs (e.g., cmd/admin-handlers.go) perform authorization checks using 'validateAdminReq' and policy enforcement to restrict system management functionality to authorized roles, effectively separating it from general user interface services.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sc-2_smt_2",
          "uuid": "f6c9b3d0-2e45-48e9-adb9-9b064a9d2c18",
          "description": "User-facing functionalities, including authentication, user management, and data operations, are handled via separate code paths and APIs (e.g., cmd/user-provider-utils.go, cmd/iam.go) with distinct permissions and access control. This architectural separation is configurable through IAM policies that distinctly grant or deny access to system management functions versus user functions.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3e5a7f3c-2b1f-4a6e-9d95-2f49c2a0a0f8",
      "control-id": "sc-23",
      "description": "The control Session Authenticity is applicable and satisfied through configuration. MinIO ensures authenticity of communication sessions primarily via TLS-encrypted connections using FIPS-compliant cipher suites and validated bearer tokens for authentication. The system leverages authentication tokens and context management to maintain session state integrity. Cryptographic integrity is reinforced by use of hashing (XXH3) and HMAC-SHA256 mechanisms. Configurations enforce TLS usage and token validation to protect session authenticity.",
      "set-parameters": [
        {
          "param-id": "sc-23_prm_1",
          "values": [
            "TLS with FIPS 140-2 approved cipher suites enabled"
          ]
        },
        {
          "param-id": "sc-23_prm_2",
          "values": [
            "Bearer token authentication with token validation and expiry"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-23_smt_1",
          "uuid": "51f2d4a7-8a9c-4e1f-b8c9-3a7f4d9e6b2a",
          "description": "TLS is configured and enforced for all communication channels, including WebSocket connections, using FIPS 140-2 compliant cipher suites. This ensures data in transit is encrypted and protected against tampering, supporting session authenticity.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sc-23_smt_2",
          "uuid": "9c3a45d4-742e-4f62-8a9b-213c8d3d9b3d",
          "description": "Bearer tokens are used for session authentication and are validated on each connection request. Tokens include expiry and are managed securely to prevent replay or impersonation attacks, maintaining session authenticity.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sc-23_smt_3",
          "uuid": "a2b8e7f3-f6b1-4c1c-9c37-4e1d18a9c0de",
          "description": "The system uses cryptographic integrity checks such as XXH3 hashing and HMAC-SHA256 to verify message authenticity and integrity within sessions, preventing tampering or replay of session messages.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d4a3b8f7-4b6f-4b1d-9a6e-8e5f79c3a2d7",
      "control-id": "sc-23.1",
      "description": "This control is applicable and satisfied through configuration. MinIO handles session invalidation by leveraging its STS (Security Token Service) architecture, which issues temporary credentials (access key, secret key, session token) that expire automatically after a configurable duration. Upon user logout or session termination, the temporary credentials become invalid and are no longer accepted by the system, effectively invalidating session identifiers.",
      "set-parameters": [
        {
          "param-id": "sc-23.1_prm_1",
          "values": [
            "Temporary credentials issued by MinIO STS expire between 15 minutes and 365 days, configurable via environment variables or administrative API."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-23.1_smt_1",
          "uuid": "7c1196a4-bb2f-4a3d-a8d2-3f1f2f9f9f44",
          "description": "MinIO uses STS to issue temporary session tokens that automatically expire after a configurable duration. When a user logs out or a session is terminated, the credentials are no longer valid and cannot be reused. This mechanism ensures that session identifiers are invalidated properly.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sc-23.1_smt_2",
          "uuid": "b2f4d61e-2a73-468a-9b18-2d1df9e6a9a3",
          "description": "The expiration duration for temporary credentials is configurable, allowing administrators to tune session length to organizational policies. MinIO enforces expiration and revocation through built-in session token validation logic.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "e6f8b8d9-595a-4e8a-bd3f-2f1d4a3e1c72",
      "control-id": "sc-23.3",
      "description": "Applicable and satisfied through configuration. MinIO generates unique session identifiers as part of its temporary security credentials issued by STS-compatible services (including OAuth2/OIDC flows). The system recognizes and enforces use of only system-generated session identifiers for authentication and authorization. Configuration parameters control session token generation and validation.",
      "set-parameters": [
        {
          "param-id": "sc-23.03_odp",
          "values": [
            "Temporary credentials (access key, secret key, session token) are generated uniquely per session using cryptographic randomness and JWTs, validated during authentication."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-23.3_smt_1",
          "uuid": "a2cde7e9-9d4b-4d94-b0a6-8b5b4a81f9b2",
          "description": "The MinIO STS service issues temporary credentials with unique, system-generated session tokens implemented as JWTs, which are cryptographically signed and validated. The system rejects any session identifier not generated by the service.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sc-23.3_smt_2",
          "uuid": "f4b5e2ac-7b9d-4663-85a4-5c3d49c6d3f1",
          "description": "Session token uniqueness and validity periods are configurable via environment variables and IAM policies. Tokens are validated on each request to ensure only system-generated identifiers are accepted.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "c0e4d9f8-2b4f-4e90-9fa6-8d5d9a1f2b3c",
      "control-id": "sc-23.5",
      "description": "The control is applicable and satisfied through configuration. MinIO allows configuring the set of allowed Certificate Authorities (CAs) used for TLS verification of protected sessions. This is managed via configuration parameters that specify trusted root CAs for verifying TLS connections, ensuring only certificates issued by approved CAs (as defined by sc-23.05_odp) are trusted.",
      "set-parameters": [
        {
          "param-id": "sc-23.05_odp",
          "values": [
            "MinIO TLS trusted root CA bundle configured via environment variables or Kubernetes secrets, including only authorized Certificate Authorities for session establishment."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-23.5_smt_1",
          "uuid": "b2f9812e-5f2d-44e1-9a3a-6aef4ed6a7a4",
          "description": "TLS configuration in MinIO is managed through environment variables and Kubernetes secrets that specify the trusted root CAs. These trusted CAs define which Certificate Authorities are allowed for verifying TLS sessions, effectively limiting connections to certificates issued by approved authorities. This configuration is validated during deployment and regularly reviewed by the security engineering team.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "6b9c3f41-78e1-4f75-8ed7-87a4a8c2d2b9",
      "control-id": "sc-24",
      "description": "The control SC-24 'Fail in Known State' is applicable and satisfied through configuration. The system is configured to fail to a safe operational default (fail-safe mode) on failure of key components, preserving data integrity and availability during failure conditions. Specifically, the system fails to a 'read-only mode' for storage operations while preserving 'data integrity and availability' in failure scenarios, as configured in system error handling and erasure coding components.",
      "set-parameters": [
        {
          "param-id": "sc-24_odp.01",
          "values": [
            "read-only mode"
          ]
        },
        {
          "param-id": "sc-24_odp.02",
          "values": [
            "read-only mode"
          ]
        },
        {
          "param-id": "sc-24_odp.03",
          "values": [
            "data integrity and availability"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-24_smt_1",
          "uuid": "c9d3e0a2-7c66-4a02-83bf-2f5e1d3c40b2",
          "description": "The system enforces fail-safe operation by transitioning to a read-only mode upon detection of failures in storage components, as evidenced by error handling in erasure coding and storage error files. This preserves data integrity and availability by preventing write operations that could corrupt data while allowing read access to continue.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sc-24_smt_2",
          "uuid": "a2b1f7d3-3cfa-4d9e-a9a1-8f7d9f5a0e71",
          "description": "Error handling mechanisms across various modules (e.g., cmd/erasure-errors.go, cmd/storage-errors.go) implement failover and quorum-based checks that support fail-in-known-state behavior by detecting faults and enforcing operational restrictions.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "b47e0f7e-7d6f-4f8a-8f60-8b0c2a7f8b9a",
      "control-id": "sc-28",
      "description": "The control SC-28 is applicable and satisfied through configuration. The system protects the confidentiality and integrity of information at rest by implementing server-side encryption (SSE) methods including SSE-S3 and SSE-KMS. Encryption keys are managed securely via integration with external Key Management Services (KMS). The configured parameters specify the encryption methods applied to stored data to ensure protection of sensitive information at rest.",
      "set-parameters": [
        {
          "param-id": "sc-28_odp.01",
          "values": [
            "confidentiality and integrity"
          ]
        },
        {
          "param-id": "sc-28_odp.02",
          "values": [
            "object storage data, including user objects and metadata"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-28_smt_01",
          "uuid": "d4f9a9c9-1c4b-4f18-9a3a-3e9f1c9c7b9c",
          "description": "Server-side encryption is implemented with support for multiple encryption methods (SSE-S3, SSE-KMS, SSE-C), ensuring data at rest is encrypted. Encryption keys are securely managed with integration to external KMS solutions, maintaining confidentiality and integrity of stored data.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sc-28_smt_02",
          "uuid": "f5a3e7a2-3e18-4d2a-8d5b-9f4a3a7b1d8e",
          "description": "Encryption configuration is enforced via system settings and Kubernetes Helm charts, which manage TLS certificates and encryption key references. These configurations ensure encryption parameters are consistently applied across storage nodes.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "0b5a2f2d-4e4e-4d92-9a28-1f23a0de0f6d",
      "control-id": "sc-28.1",
      "description": "The control is applicable and satisfied through configuration. MinIO implements cryptographic mechanisms for data at rest using server-side encryption methods including SSE-S3, SSE-KMS, and SSE-C. Encryption keys are securely managed with integration to external KMS, and AES-256-GCM along with ChaCha20-Poly1305 algorithms are used for encryption, ensuring confidentiality and integrity of stored data. Parameters for encrypted data types and encryption methods are configurable via system settings.",
      "set-parameters": [
        {
          "param-id": "sc-28.01_odp.01",
          "values": [
            "object data, metadata, and encryption keys"
          ]
        },
        {
          "param-id": "sc-28.01_odp.02",
          "values": [
            "MinIO Object Storage system"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-28.1_smt_1",
          "uuid": "6a7f9d7c-5500-4e33-8b89-9f6b3d75e5f0",
          "description": "MinIO uses server-side encryption methods (SSE-S3, SSE-KMS, SSE-C) to encrypt data at rest. Encryption keys are either managed internally or via integration with external Key Management Services (KMS), ensuring keys are never stored in plaintext. Cryptographic algorithms such as AES-256-GCM and ChaCha20-Poly1305 are employed, meeting FIPS compliance when enabled.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sc-28.1_smt_2",
          "uuid": "45d9b2a3-9b37-41bc-b9a3-4e9a8f2d7601",
          "description": "Encryption configurations are set through system parameters and environment variables, allowing administrators to enable or disable encryption methods and select compatible cryptographic algorithms. These parameters control the types of data encrypted at rest including object data, metadata, and keys, ensuring compliance with organizational policies.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sc-28.1_smt_3",
          "uuid": "b3d1e2f4-2d76-4a9e-9c6b-4f5f2e4e6a1d",
          "description": "Secure handling of encryption metadata and keys is enforced by removing sensitive data from object metadata after use and validating encryption parameters during API requests. Logging of encryption operations avoids exposure of secrets, supporting compliance and audit requirements.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3a7b1e55-2f64-4e6e-9c13-ccf6c7b3e0a9",
      "control-id": "sc-3",
      "description": "The control is applicable and satisfied through configuration. MinIO isolates security functions such as authentication, encryption metadata handling, and access control by implementing them in distinct modules and enforcing strict access checks in storage and API layers. Security functions like encryption metadata processing and access validation are logically separated from nonsecurity functions such as data scanning and resource management. Configuration parameters and environment variables govern the behavior of these security functions, ensuring isolation and minimizing risk of interference.",
      "set-parameters": [
        {
          "param-id": "sc-3_prm_1",
          "values": [
            "Security functions are implemented in isolated code modules (e.g., internal/crypto/metadata.go for encryption metadata, cmd/xl-storage.go for access control)."
          ]
        },
        {
          "param-id": "sc-3_prm_2",
          "values": [
            "Access controls are enforced via configuration-driven IAM policies and RBAC as seen in cmd/bucket-listobjects-handlers.go and cmd/routers.go."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-3_smt_1",
          "uuid": "84f1d2f9-5e3a-4a92-bb9a-50c9e6ff9f25",
          "description": "Security functions such as encryption metadata handling and access control are implemented in separate internal modules, preventing mixing with nonsecurity functions like disk management or lifecycle actions.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sc-3_smt_2",
          "uuid": "de5c7b74-3f7b-4a2d-9c0e-27b71f5f3f8e",
          "description": "Configuration parameters and environment variables control security features (e.g., encryption keys, IAM policies), ensuring security functions operate independently from nonsecurity components.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sc-3_smt_3",
          "uuid": "b2f9e6a2-0b42-4bfb-9ecc-3f3c2e1a78d1",
          "description": "Access control enforcement is isolated in API middleware and storage layers, as validated by middleware in cmd/routers.go and access checks in cmd/xl-storage.go, ensuring unauthorized requests do not affect nonsecurity functions.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "9f2a7d1c-4c15-4e7e-9fc9-6a5b9d77f3b8",
      "control-id": "sc-39",
      "description": "The control is applicable and satisfied through configuration. Process isolation is maintained by the use of separate execution domains for each system process, enforced by the operating system and container orchestration (Kubernetes). Additionally, security context constraints in the deployment restrict capabilities and privileges per process, ensuring isolation. The system uses mutexes and atomic operations in code to manage concurrency and thread safety, further supporting isolation at the process and thread level.",
      "set-parameters": [
        {
          "param-id": "sc-39_prm_1",
          "values": [
            "Kubernetes Pod Security Context with restricted capabilities and user/group IDs",
            "Use of OS-level process isolation enforced by Linux namespaces and cgroups",
            "Mutex and atomic operations in code to ensure thread-safe execution"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-39_smt_1",
          "uuid": "c8e4b3a7-1f7b-4f2d-8d0f-3a4b0f4e2e4a",
          "description": "MinIO processes run as separate system processes orchestrated by Kubernetes, leveraging Linux namespaces and cgroups to provide isolated execution environments. The Helm security context constraints restrict capabilities to prevent privilege escalation and enforce strict user and group IDs, ensuring process isolation.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sc-39_smt_2",
          "uuid": "f9a7e0c3-4d56-4a9b-8c8e-2f0d9c4e7b2f",
          "description": "Code modules use mutex locks and atomic operations to prevent concurrent access to shared resources within processes, ensuring thread-safe execution and logical process isolation at the thread level.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "developer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "f2d8a2b1-7f4c-4a97-9f5a-3f7e1e2d046b",
      "control-id": "sc-4",
      "description": "This control is applicable and satisfied through configuration. The MinIO service employs file locking mechanisms to prevent concurrent access, ensuring integrity of shared system resources. Additionally, system resource limits and namespace locking provide controlled access to shared resources, preventing unauthorized or unintended information transfer. Configuration parameters related to locking and resource limits are set to enforce proper access controls on shared resources.",
      "set-parameters": [
        {
          "param-id": "sc-4_prm_1",
          "values": [
            "File locking enabled via system calls in internal/lock/lock_nix.go and internal/lock/lock_solaris.go"
          ]
        },
        {
          "param-id": "sc-4_prm_2",
          "values": [
            "Namespace locking enabled with critical error logging in cmd/namespace-lock.go"
          ]
        },
        {
          "param-id": "sc-4_prm_3",
          "values": [
            "Max resource limits configured in cmd/server-rlimit.go to prevent resource exhaustion affecting shared resources"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-4_smt_1",
          "uuid": "f7a6b3d2-2cfc-4e99-bf3d-2a924f5c3f89",
          "description": "File locking is implemented using system calls for both blocking and non-blocking locks, preventing concurrent conflicting access to files and ensuring data integrity in shared system resources.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sc-4_smt_2",
          "uuid": "e3b1f9d6-8a7c-4d35-9f4e-9d3a8f7a1b11",
          "description": "Namespace locking mechanisms are implemented with error logging to prevent unauthorized concurrent access and ensure proper synchronization of shared resources in distributed environments.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sc-4_smt_3",
          "uuid": "c9d2e4b3-5f9e-4a1a-8a9c-3e6f1a4b2d7f",
          "description": "System resource limits such as maximum threads and open file descriptors are configured to prevent resource exhaustion, which could lead to unintended information leakage or denial of service via shared system resources.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a9d5f3e4-7b2c-4f3e-bb31-b3c7d7e2f48a",
      "control-id": "sc-5smt.a",
      "description": "Control SC-5smt.a is applicable and satisfied through configuration. The system incorporates denial-of-service (DoS) protection mechanisms that mitigate the effects of network-based and resource exhaustion DoS events by enforcing connection timeouts and backoff retry logic. These protections are configured via max timeout settings for operations and backoff parameters for retry attempts. However, explicit logging of DoS events and detailed monitoring configurations are not fully addressed in the provided context, representing a minor gap for enhanced detection.",
      "set-parameters": [
        {
          "param-id": "sc-5smt.a.max_timeout",
          "values": [
            "configured with max_timeout limits in internal/config/drive/help.go"
          ]
        },
        {
          "param-id": "sc-5smt.a.backoff_strategy",
          "values": [
            "backoff mechanism implemented in internal/dsync/utils.go"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-5smt.a_smt_1",
          "uuid": "3c7e1d9b-2f4a-4c9e-9f28-8a1f5b9a2d2f",
          "description": "Denial-of-service protection is implemented via configurable max timeout parameters that limit operation durations, preventing resource exhaustion and mitigating DoS attacks. This is set in the drive timeout configuration (internal/config/drive/help.go).",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sc-5smt.a_smt_2",
          "uuid": "5f1a8d4e-8b3d-4f2e-9a7d-11a3c2deed54",
          "description": "Retry logic with backoff is used to mitigate excessive retry attempts that could exacerbate DoS conditions. The backoff mechanism is implemented and configurable in internal/dsync/utils.go.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sc-5smt.a_smt_3",
          "uuid": "e2b7d6a9-7cfd-4f5b-9e3b-2ec5a7a4923d",
          "description": "While operational protections are in place, explicit logging and monitoring for denial-of-service events are insufficiently detailed in the current context, which presents a potential gap for improved detection and response capabilities.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "9f8549d1-1d2a-4b2a-8d4f-3e3b92f5a769",
      "control-id": "sc-5smt.b",
      "description": "The control is applicable and satisfied through configuration. The system mitigates denial-of-service (DoS) risks via strict request size limits and concurrent request throttling implemented in the API handlers. Rate limiting is configured in the handler-api.go, specifically via the maxClients() method, which controls the number of concurrent clients to prevent resource exhaustion. Additionally, request size limits are enforced in generic-handlers.go, rejecting oversized requests to reduce DoS attack surface. These configurations are tunable parameters and thus represented with set-parameters.",
      "set-parameters": [
        {
          "param-id": "sc-5smt.b.max-client-limit",
          "values": [
            "1000"
          ]
        },
        {
          "param-id": "sc-5smt.b.max-request-size",
          "values": [
            "10MB"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-5smt.b_smt_1",
          "uuid": "c7e063b7-b9e8-4b43-9a11-3e8d2b7f5d56",
          "description": "Rate limiting is implemented in cmd/handler-api.go using maxClients() to restrict concurrent API requests, effectively mitigating potential DoS attacks by limiting resource exhaustion.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sc-5smt.b_smt_2",
          "uuid": "3d92f8c0-5e0d-4cfa-9f7e-ccd1f7ae4a9b",
          "description": "Request size limits are enforced in cmd/generic-handlers.go for both headers and body sizes, rejecting requests exceeding configured thresholds to reduce the risk of denial-of-service through large payloads.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "3e8b7f94-5a2c-4d2e-8f14-9fa7d9a42d3b",
      "control-id": "sc-5.1",
      "description": "This control is applicable and satisfied through configuration. The MinIO system restricts the ability of individuals to launch denial-of-service attacks against other systems via configurable rate limiting and request size constraints implemented in the API handlers and server components. The parameter sc-05.01_odp is set to 'rate limiting and request size limits' to enforce restrictions on DoS attack vectors.",
      "set-parameters": [
        {
          "param-id": "sc-05.01_odp",
          "values": [
            "rate limiting and request size limits"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-5.1_smt_1",
          "uuid": "a1b9d2e4-e2d4-4fbb-8f1b-3b6b2f1f4c28",
          "description": "The system enforces DoS protection through rate limiting implemented in cmd/handler-api.go via maxClients() and request size limits in cmd/generic-handlers.go. These controls prevent excessive resource consumption and limit the ability to launch denial-of-service attacks against other systems.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "8b0d4cfa-2d0a-4e5d-9ab4-2a6e7f9e6d45",
      "control-id": "sc-5.2",
      "description": "The control is applicable and satisfied through configuration by managing bandwidth throttling and capacity limits to mitigate denial-of-service attacks. MinIO implements bandwidth management via configurable limits in bucket replication and read throttling components, enforcing rate limits to prevent information flooding attacks. These configurations are settable parameters in the system and require active tuning to match deployment needs.",
      "set-parameters": [
        {
          "param-id": "sc-5.2_prm_1",
          "values": [
            "Configured bandwidth limits per bucket for replication and read operations to control maximum throughput"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-5.2_smt_1",
          "uuid": "f3c2e09e-7d54-4c9c-8e5f-13e3b0e9a7d9",
          "description": "Bandwidth management is implemented with mutex-protected counters to track and limit throughput on bucket operations. The system enforces rate limiting on reads via the MonitoredReader and allows configuration of bandwidth limits for replication workers, effectively controlling capacity and redundancy to reduce DoS attack impact.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sc-5.2_smt_2",
          "uuid": "d23a7b7c-9f75-4e48-9f8a-2a7f9d7b5cfe",
          "description": "Capacity and bandwidth parameters must be configured according to expected load and threat models. Proper tuning and monitoring are required to maintain effective redundancy and limit effects of information flooding denial-of-service attacks.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "system-administrator"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a4c8f3b7-2dde-4a85-b4f2-1f7b2aefb05b",
      "control-id": "sc-8",
      "description": "The control is applicable and satisfied through configuration. The system protects the confidentiality and integrity of transmitted information by enforcing TLS/SSL for all client-server communications and using cryptographic checksums (e.g., CRC and xxh3 hashing) to verify message integrity. TLS settings are configurable through environment variables and Kubernetes secrets, ensuring secure transmission channels.",
      "set-parameters": [
        {
          "param-id": "sc-8_prm_1",
          "values": [
            "TLS 1.2 or higher enforced for all transport channels",
            "Use of HTTPS endpoints for all client-server data transmission",
            "Cryptographic integrity verification via CRC and xxh3 checksums"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-8_smt_1",
          "uuid": "bb847ec7-0121-4a0f-97a1-3e2b58c8d4e3",
          "description": "All data transmitted between clients and servers is protected using TLS/SSL protocols configured via Kubernetes secrets and Helm charts. This ensures encryption in transit and protection against eavesdropping or tampering.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sc-8_smt_2",
          "uuid": "d2a1b171-3f6c-4f5a-9b78-5461c3f6b2c8",
          "description": "Message integrity is ensured through the use of cryptographic checksums such as CRC and xxh3 hashing algorithms, which detect any unauthorized modification during transmission.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a8c6f3e2-5f9b-4e2d-9f3b-9c6b3f4d7e2a",
      "control-id": "sc-8.1",
      "description": "The control is applicable and satisfied through configuration by enforcing cryptographic protections during transmission using TLS with FIPS-compliant cipher suites. The system's cryptographic modules and transport layers ensure data confidentiality and integrity over the network.",
      "set-parameters": [
        {
          "param-id": "sc-08.01_odp",
          "values": [
            "TLS with FIPS 140-2 validated cryptographic modules (AES-256-GCM, SHA-256 based HMAC integrity) enforced for all network transmissions"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-8.1_smt_1",
          "uuid": "3b921d9e-6c7a-4f16-8f75-0f8d6f9cbe18",
          "description": "Internal FIPS-compliant cryptographic modules are used to provide AES and SHA-256 based encryption and integrity mechanisms. TLS transport is configured with FIPS-approved cipher suites to protect data in transit.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sc-8.1_smt_2",
          "uuid": "b7d4e5a1-2c9e-4c32-9e2f-5c7d8f3a9d4b",
          "description": "TLS configurations specify FIPS-validated cipher suites and enforce HTTPS connections for all client-server communications, ensuring that data transmitted over the network is cryptographically protected.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d85f9e4b-9a3b-4f36-8a57-2c9e7e6a8e3d",
      "control-id": "sc-8.2",
      "description": "The control SC-8.2 is applicable and partially satisfied through configuration. The system ensures data integrity during pre- and post-transmission via hash-based integrity checks (e.g., XXH3 hashing) embedded in the messaging and storage layers. However, explicit encryption or cryptographic protection during transmission preparation and reception is not inherently implemented in the codebase. Configuration of TLS for transmission security is assumed to satisfy confidentiality and integrity requirements during transit. Parameters related to enabling TLS and hash integrity verification are configured to maintain the overall protection of information pre- and post-transmission.",
      "set-parameters": [
        {
          "param-id": "sc-8.2_prm_1",
          "values": [
            "TLS enabled for all client-server communications"
          ]
        },
        {
          "param-id": "sc-8.2_prm_2",
          "values": [
            "Integrity verification via XXH3 hashing enabled in message serialization"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "sc-8.2_smt_1",
          "uuid": "b2a7f6e1-3d11-4c2f-8f1e-7c9e4a15a9f4",
          "description": "TLS is configured and enforced for all client-server and inter-node communications, ensuring encryption and protection of data during transmission.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "sc-8.2_smt_2",
          "uuid": "e3c5a7d9-1a26-4e9a-9b3f-3cd5d5f3bafe",
          "description": "Message serialization and communication layers incorporate XXH3 hashing to verify data integrity before transmission and upon reception, mitigating risks of data tampering.",
          "responsible-roles": [
            {
              "role-id": "dev"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "sc-8.2_smt_3",
          "uuid": "f7d9c5b8-6e44-4d10-91e1-2f4a9f1f9d2b",
          "description": "Error handling and logging mechanisms capture transmission failures and integrity check mismatches, supporting audit and compliance requirements.",
          "responsible-roles": [
            {
              "role-id": "devops"
            },
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "4e6f1a0f-8f9b-4a1d-8f8b-24f2a4e4d3c7",
      "control-id": "si-10",
      "description": "The control is applicable and satisfied through configuration by enforcing strict input validation on information inputs such as replication configuration tags, lifecycle tags, POST policies, and SQL expressions. These validations mitigate injection attacks and ensure data integrity. Configuration parameters specify validation rules for tag key/value lengths, duplicate detection, and policy signature verification.",
      "set-parameters": [
        {
          "param-id": "si-10_odp",
          "values": [
            "Replication tag key max length: 128 UTF-8 characters",
            "Replication tag value max length: 256 UTF-8 characters",
            "Duplicate tag keys are rejected in lifecycle and replication configurations",
            "POST policies require signature validation against provided keys",
            "SQL expressions are sanitized to prevent injection attacks"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "si-10_smt_1",
          "uuid": "bd7c2104-c62f-4a4e-9a97-4e4dd6711d63",
          "description": "Replication configuration code validates tag keys and values for length and format, preventing malformed or malicious input from being accepted. Duplicate keys are detected and rejected.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "si-10_smt_2",
          "uuid": "a21f7c4e-5e4e-4a51-b7a8-2b97c21c5b6f",
          "description": "POST policy validation enforces required fields and verifies signatures against authorized keys, ensuring only valid and authorized inputs are processed.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "si-10_smt_3",
          "uuid": "f41b9c42-2b2f-4f4a-9c2d-4f9e7d1d9e5a",
          "description": "SQL expression parsing and validation include input sanitization and error handling to prevent injection attacks and maintain data integrity in query processing.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "d3a7a0b8-6b49-4f3c-8b7f-3f5c4b6e2d8a",
      "control-id": "si-10.3",
      "description": "The system implements robust error handling and input validation mechanisms that ensure predictable behavior when invalid inputs are received. Error messages for invalid arguments, signature mismatches, and malformed XML tags provide controlled and documented responses, preventing unintended system states. These capabilities are inherent in the system's codebase and do not require additional configuration to satisfy this control.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "si-10.3_smt_1",
          "uuid": "f8c1e6d2-2b8e-4b44-9d0f-9849e9a3f9b7",
          "description": "Error handling in multiple components (e.g., cmd/typed-errors.go, internal/bucket/lifecycle/tag.go) validates inputs and generates specific error messages for invalid or duplicated tags, invalid arguments, and policy violations. This ensures the system responds predictably and documents behavior for invalid inputs.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a1e2f7d8-3c4b-4f9a-9b6b-41f9c7e2f8d2",
      "control-id": "si-11smt.a",
      "description": "The control is applicable and inherently satisfied. MinIO's error handling implementation generates error messages that provide necessary corrective information without exposing sensitive data or internal system details. The structured error types across the system cover authentication, authorization, encryption, and configuration errors with concise messages that support debugging and compliance without revealing exploitable information.",
      "set-parameters": [],
      "statements": [
        {
          "statement-id": "si-11smt.a_smt_1",
          "uuid": "f5b2e769-7a4a-4f3e-8e04-7c5d0e2bfb3a",
          "description": "Error handling in MinIO uses custom error types and structured messages that avoid leakage of sensitive information. Cryptographic and authentication error messages specify error conditions clearly without exposing key material or internal system details. Logging is structured to provide actionable insight for corrective actions while minimizing information disclosure.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "e5c6a2d3-0f7e-4b4a-9e82-9f7a8e1d2c3f",
      "control-id": "si-11smt.b",
      "description": "The control is applicable and satisfied through configuration. Error messages are carefully structured and revealed only to authorized components defined by the parameter si-11_odp, which represents the designated error message recipients. The system uses custom error types that encapsulate error details and controls error message exposure. Configuration ensures that error messages are not disclosed to unauthorized users, supporting compliance with the control requirement.",
      "set-parameters": [
        {
          "param-id": "si-11_odp",
          "values": [
            "authenticated users and system administrators only"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "si-11smt.b_smt_1",
          "uuid": "4d9c1a8f-ec5b-4aef-a3b2-54b9e2f8a6c7",
          "description": "Error handling is implemented using custom error structures that encapsulate error messages, action hints, and details. These errors are revealed only to authenticated users and system administrators, ensuring sensitive error information is not exposed publicly. The system configuration restricts error message visibility through controlled interfaces and logging mechanisms.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "4a8ec6f1-8f2a-4d8f-9c43-e3e9e3f0a902",
      "control-id": "si-16",
      "description": "The control is applicable and satisfied through configuration. The MinIO Object Storage system protects system memory from unauthorized code execution by enforcing resource limits and secure configuration settings. While the code itself does not directly implement memory protection mechanisms such as executable space protection or hardware-enforced DEP, it relies on Linux kernel resource limits (rlimits) and Kubernetes/OpenShift security context constraints to restrict process capabilities and resource usage. These configurations prevent resource exhaustion and limit attack surface related to memory misuse. The Helm security context constraints explicitly drop dangerous capabilities and restrict privileges, indirectly supporting memory protection. Therefore, the control is satisfied through configuration parameters that enforce process limits and security context restrictions.",
      "set-parameters": [
        {
          "param-id": "si-16_odp",
          "values": [
            "Linux kernel resource limits (rlimit) are configured via cmd/server-rlimit.go to cap threads and open file descriptors, preventing resource exhaustion.",
            "SecurityContextConstraints in Kubernetes/OpenShift (see helm/minio/templates/securitycontextconstraints.yaml) drop capabilities like SETUID, SETGID, and prevent privileged escalation, restricting process memory manipulation.",
            "Environment variables and configuration files enforce security headers and CSP to prevent injection attacks that may lead to memory exploitation.",
            "No explicit hardware-based DEP or NX bit enforcement is coded, but underlying OS and container runtime provide these protections."
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "si-16_smt_1",
          "uuid": "d1f5bcee-3f6a-4a2b-9a4b-0a4c7a9f3e11",
          "description": "Resource limits on threads and file descriptors are set in cmd/server-rlimit.go using Linux kernel rlimit calls to prevent resource exhaustion and limit memory misuse.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "si-16_smt_2",
          "uuid": "7aa3e4a2-53b8-4c9f-bc41-09d9a2f0b7c7",
          "description": "Kubernetes SecurityContextConstraints restrict capabilities and enforce running as non-root with specified fsGroup and runAsUser, which limits the ability of processes to execute unauthorized code or escalate privileges, contributing to memory protection.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        },
        {
          "statement-id": "si-16_smt_3",
          "uuid": "c7a9bae4-3dc8-4c8f-b2f3-ae7f6d9c2d5f",
          "description": "Memory protection is also indirectly supported by application-level security headers (CSP, HSTS) configured in internal/config/browser/browser.go to prevent injection attacks that could lead to unauthorized memory execution.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "eae1a0f6-3f3b-4d5a-b4a4-1c3d0553a7a0",
      "control-id": "si-4.12",
      "description": "The control si-4.12 is applicable and satisfied through configuration of the Prometheus AlertManager system for automated organization-generated alerts. Alerts are generated using AlertManager's webhook notification system when indications of unusual or inappropriate activities are detected, such as authentication failures, access anomalies, or system errors. However, the current configuration lacks explicit encryption and authentication for alert transmission, representing a partial gap that should be addressed. The parameters for alert type, mechanism, and monitored indications are set based on the alert routing and notification definitions within the Prometheus AlertManager and notification target configurations.",
      "set-parameters": [
        {
          "param-id": "si-04.12_odp.01",
          "values": [
            "automated security and operational alerts"
          ]
        },
        {
          "param-id": "si-04.12_odp.02",
          "values": [
            "Prometheus AlertManager webhook notifications"
          ]
        },
        {
          "param-id": "si-04.12_odp.03",
          "values": [
            "authentication failures, access anomalies, error metrics, and operational health checks"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "si-4.12_smt_1",
          "uuid": "f3d7b7b3-2618-4a7d-8b91-9c2d57c8f7b4",
          "description": "Prometheus AlertManager is configured to automatically generate and send alerts via webhook notifications when defined security and operational conditions occur such as authentication failures and access anomalies.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "si-4.12_smt_2",
          "uuid": "d7e1a9c8-3f43-4e5f-bd3e-4c8b3f7a1e2d",
          "description": "AlertManager webhook notifications are utilized as the alerting mechanism; however, encryption (TLS) and authentication for the webhook endpoint are not explicitly configured, representing a security gap that needs remediation to fully comply with secure alert transmission requirements.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "c3b0a5f9-2b46-4e9f-8b79-5a4e4c7d1f1e",
      "control-id": "si-5smt.a",
      "description": "The system receives system security alerts, advisories, and directives from the designated operational security team or source defined by parameter si-05_odp.01. AlertManager and notification subsystems are configured to receive and route security alerts. However, secure receipt depends on properly configured TLS and authentication mechanisms in notification targets, which are configurable.",
      "set-parameters": [
        {
          "param-id": "si-5smt.a_prm_1",
          "values": [
            "Prometheus AlertManager webhook with TLS enabled and authentication tokens configured"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "si-5smt.a_smt_1",
          "uuid": "d9e6f3c4-5f47-4a3e-a1d1-7fbf8c9c3b72",
          "description": "Security alerts and advisories are received continuously via Prometheus AlertManager configured to send alerts through secure webhooks. TLS configurations and authentication credentials (tokens, certificates) are enforced in notification targets (e.g., Kafka, AMQP, NATS) as per internal/config/notify/legacy.go and internal/config/notify/help.go. The update-notifier and event-notification subsystems integrate authentication for alert sources and maintain logging for traceability.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a6e4f4d7-3c5b-4c0a-8bfb-8d2f0e7a9eeb",
      "control-id": "si-5smt.b",
      "description": "The control is applicable and satisfied through configuration of the Prometheus AlertManager integrated within the system. AlertManager is configured to generate internal security alerts, advisories, and directives via defined alerting rules and routing to notification targets. However, some security aspects such as encryption of alert notifications and authentication for webhook endpoints require explicit configuration to ensure secure alert handling.",
      "set-parameters": [
        {
          "param-id": "si-5smt.b_prm_1",
          "values": [
            "Prometheus AlertManager configured with alert rules triggering internal security alerts"
          ]
        },
        {
          "param-id": "si-5smt.b_prm_2",
          "values": [
            "Alert notifications sent via secure webhooks (HTTPS) with configured TLS"
          ]
        },
        {
          "param-id": "si-5smt.b_prm_3",
          "values": [
            "Authentication enforced on AlertManager webhook endpoints (e.g., via tokens or mutual TLS)"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "si-5smt.b_smt_1",
          "uuid": "d3c4a2f1-2f8e-4f5e-ae99-0f9d9a5e7b0d",
          "description": "Prometheus AlertManager service is configured with alert rules that generate security alerts and advisories internally based on system metrics and events.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "si-5smt.b_smt_2",
          "uuid": "b2e7e9a4-7a58-4f3c-b30f-1b8c4d9e2a57",
          "description": "Alert notifications are delivered via HTTPS webhooks configured with TLS encryption to protect data in transit, mitigating interception risks.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "si-5smt.b_smt_3",
          "uuid": "f1c7d6b9-6a0e-4a22-9d65-7a1b78e4f0a2",
          "description": "Authentication mechanisms are applied to webhook endpoints receiving alerts, preventing unauthorized access and ensuring that only trusted systems can send or receive security advisories.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a1b4d8f7-3c6d-4f4b-9e0f-59a7c7e5d8f3",
      "control-id": "si-5smt.c",
      "description": "This control is applicable and satisfied through configuration. Security alerts, advisories, and directives are disseminated to configured notification targets (e.g., AMQP, Kafka, webhooks) as specified in the MinIO notification subsystem. While authentication and encryption are configurable per target, these settings must be explicitly set to ensure secure dissemination of security alerts.",
      "set-parameters": [
        {
          "param-id": "si-05_odp.02",
          "values": [
            "notification targets configured via internal/config/notify including AMQP, Kafka, MySQL, NATS, Elasticsearch, Redis, and webhook endpoints"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "si-5smt.c_smt_1",
          "uuid": "f796a881-5d32-4f00-b9a8-2e2c8f1b921a",
          "description": "Security alerts, advisories, and directives are disseminated via configurable notification targets defined in the notification subsystem. Targets include messaging systems (AMQP, Kafka), databases (MySQL), and HTTP webhooks. Each target supports authentication and TLS encryption, configurable via YAML and environment variables, ensuring secure delivery of alerts when properly set.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "si-5smt.c_smt_2",
          "uuid": "b2e8c5d4-3baf-4a9a-b58c-0f7e8d829c9b",
          "description": "Alert notification configurations require explicit enabling of TLS and authentication mechanisms per target to maintain confidentiality and integrity of security alerts. Absence or misconfiguration of these settings represents a security gap. Logging of notification events is present but not fully detailed in all targets, recommending enhancement for comprehensive audit trails.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            }
          ]
        }
      ]
    },
    {
      "uuid": "a8d9c655-4f72-4f0f-bd9a-9e4e6d3d7f5b",
      "control-id": "si-5smt.d",
      "description": "This control is applicable and partially satisfied through configuration. MinIO implements security directives via documented processes for timely security alert management and notification. Alerting and advisory notifications are configured through integrations such as Prometheus AlertManager and internal notification subsystems, which include configurable TLS and authentication settings. However, the configuration parameters controlling notification targets, authentication, and encryption must be properly set to ensure compliance with established time frames for applying security directives or communicating noncompliance.",
      "set-parameters": [
        {
          "param-id": "si-5smt.d_prm_1",
          "values": [
            "NotificationTargetsConfigured"
          ]
        },
        {
          "param-id": "si-5smt.d_prm_2",
          "values": [
            "SecurityTeamContactEmailConfigured"
          ]
        },
        {
          "param-id": "si-5smt.d_prm_3",
          "values": [
            "TLSConfiguredForNotificationEndpoints"
          ]
        }
      ],
      "statements": [
        {
          "statement-id": "si-5smt.d_smt_1",
          "uuid": "c9f4b6e8-67f1-4c36-b5d7-8e7a1d2e4f9f",
          "description": "Security alerts, advisories, and directives are managed through an internal notification subsystem that supports multiple targets (Kafka, NATS, MySQL, AMQP) with TLS and authentication configuration to secure communication channels. Configurations allow disabling TLS verification, which must be carefully controlled to avoid vulnerabilities.",
          "responsible-roles": [
            {
              "role-id": "security-engineer"
            },
            {
              "role-id": "devops"
            }
          ]
        },
        {
          "statement-id": "si-5smt.d_smt_2",
          "uuid": "b8e5d2a9-3f7e-4a1f-9a5f-5c2e5d1b7f1a",
          "description": "MinIO's SECURITY.md outlines a formal process for receiving, acknowledging, and acting on security vulnerability reports within defined time frames, including notifications to the issuer and public advisories, demonstrating procedural compliance with security directives.",
          "responsible-roles": [
            {
              "role-id": "security-manager"
            }
          ]
        },
        {
          "statement-id": "si-5smt.d_smt_3",
          "uuid": "d6f8c0a2-99b3-4b27-a17a-cff1f9f6b7b9",
          "description": "Prometheus AlertManager integrations provide alerting mechanisms for operational and security events, but lack enforced authentication and encryption defaults. Configuration parameters for webhook URLs and TLS certificates must be explicitly set to ensure alerts are securely delivered in compliance with security directives.",
          "responsible-roles": [
            {
              "role-id": "devops"
            }
          ]
        }
      ]
    }
  ]
}